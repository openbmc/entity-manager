{
  "comments": [
    {
      "key": {
        "uuid": "5452a8e6_f888995a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-07-28T16:36:24Z",
      "side": 1,
      "message": "Is there an accompanying change to IPMI to make it read out this value and produce it properly in the SDR?",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 17,
        "endChar": 59
      },
      "revId": "7e94b6ebdf55d882ebad80a756173840df374fd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99267d50_050eb279",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 17,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2021-07-30T02:09:58Z",
      "side": 1,
      "message": "Not yet, I will look into that.",
      "parentUuid": "5452a8e6_f888995a",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 17,
        "endChar": 59
      },
      "revId": "7e94b6ebdf55d882ebad80a756173840df374fd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4902b3a_95089292",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 17,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2021-08-18T10:47:23Z",
      "side": 1,
      "message": "I have a few questions around this. \n\nIt seems that the IPMI spec allows for one positive and one negative hysteresis per sensor, not per threshold. What would you propose to return for the hysteresis values if a sensor has multiple thresholds with different hysteresises?\n\nSecondly, are you asking for hysteresis values to be included in the get_sdr response or for the [get/set] hysteresis commands to be implemented?",
      "parentUuid": "99267d50_050eb279",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 17,
        "endChar": 59
      },
      "revId": "7e94b6ebdf55d882ebad80a756173840df374fd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d90d0a1c_9478779e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-24T18:06:31Z",
      "side": 1,
      "message": "\u003e I have a few questions around this. \n\u003e \n\u003e It seems that the IPMI spec allows for one positive and one negative hysteresis per sensor, not per threshold. What would you propose to return for the hysteresis values if a sensor has multiple thresholds with different hysteresises?\n\nThat seems like a limitation we should consider as part of this patch.  What behavior would you recommend?  Either we can move hysteresis up, such that each threshold doesn\u0027t get its own explicit hysteresis, or we can define some behavior (like 1st thresholds hysteresis wins).\n\n\u003e \n\u003e Secondly, are you asking for hysteresis values to be included in the get_sdr response or for the [get/set] hysteresis commands to be implemented?\n\nI\u0027m asking for the implementation to be \"correct\", in that, because the SDR commands already assume a hysteresis value, adding the parameter now makes it \"wrong\".  Assuming we have no ipmlementation for get/set hysteresis, I\u0027m fine not adding that.\n\nSaid another way, if I take in this patch, and I pull an SDR for this sensor, it\u0027s going to report a hysteresis of 1, which is wrong (but was correct before this patch).",
      "parentUuid": "d4902b3a_95089292",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 17,
        "endChar": 59
      },
      "revId": "7e94b6ebdf55d882ebad80a756173840df374fd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a2c944e_87677c7d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 17,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2021-11-04T10:10:04Z",
      "side": 1,
      "message": "Sorry for the late reply!\n\n\u003e That seems like a limitation we should consider as part of this patch.  What behavior would you recommend?  Either we can move hysteresis up, such that each threshold doesn\u0027t get its own explicit hysteresis, or we can define some behavior (like 1st thresholds hysteresis wins).\n\nWe would like to keep the flexibility of having different hystereses per threshold, so lets go with the behaviour of 1st threshold hysteresis wins.\n\n\u003e Said another way, if I take in this patch, and I pull an SDR for this sensor, it\u0027s going to report a hysteresis of 1, which is wrong (but was correct before this patch).\n\nI didn\u0027t actually see this behaviour in my (very limited) tests -- I saw that the SDR output showed a hysteresis value of \"Unspecified\". From my understanding of the ipmi-host code I can\u0027t see this happening either. Do you know what sensors/platforms this might happen on?\n\nHave pushed some patches to show the correct hysteresis value from entity manager configs:\nhttps://gerrit.openbmc-project.xyz/c/openbmc/phosphor-host-ipmid/+/48616\nhttps://gerrit.openbmc-project.xyz/c/openbmc/phosphor-host-ipmid/+/48615",
      "parentUuid": "d90d0a1c_9478779e",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 17,
        "endChar": 59
      },
      "revId": "7e94b6ebdf55d882ebad80a756173840df374fd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b484dae_3c315605",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-07-30T16:13:51Z",
      "side": 1,
      "message": "Can you please test the behavior for the sensors that don\u0027t support hysteresis.  Ideally the schema would prevent loading a hysteresis value on the sensors that don\u0027t support it (unless you intend on adding dbus-sensors support for it, in which case it\u0027s moot).\n\nGiven the schema files are still a little bit disingenuous, so i\u0027m probably ok with imperfect enforcement of schema, but I\u0027d at least like to understand what to expect.",
      "revId": "7e94b6ebdf55d882ebad80a756173840df374fd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "646ca757_c629ffa9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2021-08-02T06:43:55Z",
      "side": 1,
      "message": "What is adequate testing here? Giving a dbus-sensors app a config with a hysteresis and seeing that it doesn\u0027t error out? \n\nFrom the looks of parseThresholdConfig() in dbus-sensors the Hysteresis field if supplied will be ignored. Happy to confirm that this is the case and make changes if it isn\u0027t, just want to be sure I\u0027m understanding you correctly :)",
      "parentUuid": "1b484dae_3c315605",
      "revId": "7e94b6ebdf55d882ebad80a756173840df374fd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b56b789e_5978ef4b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-04T19:42:23Z",
      "side": 1,
      "message": "\u003e What is adequate testing here? Giving a dbus-sensors app a config with a hysteresis and seeing that it doesn\u0027t error out? \n\nGood: it would error out, because you gave it a value it didn\u0027t allow in the config.  \nBetter: It would catch this at compile time because of it not being allowed in the schema.\nBest: Dbus-sensors just supported setting hyseresis.\n\nI don\u0027t have a strong opinion here on how far to go, I\u0027m happy to accept things as-is, but I want to understand the behavior, and make sure we\u0027re not causing a crash or something worse by allowing this schema change through for sensors that don\u0027t support it.\n\n\n\u003e \n\u003e From the looks of parseThresholdConfig() in dbus-sensors the Hysteresis field if supplied will be ignored. Happy to confirm that this is the case and make changes if it isn\u0027t, just want to be sure I\u0027m understanding you correctly :)\n\nI\u0027m not sure you need to explicitly test it, but it would be good if we updated that code to make something more obvious to the user that this sensor doesn\u0027t support the parameter that got allowed through the schema.",
      "parentUuid": "646ca757_c629ffa9",
      "revId": "7e94b6ebdf55d882ebad80a756173840df374fd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a223de8_2921f4e2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2021-08-18T10:47:23Z",
      "side": 1,
      "message": "\u003e I don\u0027t have a strong opinion here on how far to go, I\u0027m happy to accept things as-is, but I want to understand the behavior, and make sure we\u0027re not causing a crash or something worse by allowing this schema change through for sensors that don\u0027t support it.\n\nIt seems that we can add arbitrary fields to configs that don\u0027t make the validate-configs script fail. I can\u0027t see how to make hysteresis not allowed in the schema for dbus sensors. \n\n\u003e I\u0027m not sure you need to explicitly test it, but it would be good if we updated that code to make something more obvious to the user that this sensor doesn\u0027t support the parameter that got allowed through the schema.\n\nHow about this? \nhttps://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/45986  I don\u0027t think that erroring out here makes sense, as we don\u0027t error out for malformed thresholds in configs.",
      "parentUuid": "b56b789e_5978ef4b",
      "revId": "7e94b6ebdf55d882ebad80a756173840df374fd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78be39ca_844f5074",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-24T18:06:31Z",
      "side": 1,
      "message": "\u003e \u003e I don\u0027t have a strong opinion here on how far to go, I\u0027m happy to accept things as-is, but I want to understand the behavior, and make sure we\u0027re not causing a crash or something worse by allowing this schema change through for sensors that don\u0027t support it.\n\u003e \n\u003e It seems that we can add arbitrary fields to configs that don\u0027t make the validate-configs script fail. I can\u0027t see how to make hysteresis not allowed in the schema for dbus sensors. \n\nThat\u0027s fine.  I need to make sure that the behavior makes sense if someone accidentally assumes (because of the schema) that hysteresis is supported on all sensors.\n\n\u003e \n\u003e \u003e I\u0027m not sure you need to explicitly test it, but it would be good if we updated that code to make something more obvious to the user that this sensor doesn\u0027t support the parameter that got allowed through the schema.\n\u003e \n\u003e How about this? \n\u003e https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/45986  I don\u0027t think that erroring out here makes sense, as we don\u0027t error out for malformed thresholds in configs.\n\nThat works for me.",
      "parentUuid": "5a223de8_2921f4e2",
      "revId": "7e94b6ebdf55d882ebad80a756173840df374fd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ce4f968_4f9920fb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2021-11-04T10:10:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "78be39ca_844f5074",
      "revId": "7e94b6ebdf55d882ebad80a756173840df374fd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}