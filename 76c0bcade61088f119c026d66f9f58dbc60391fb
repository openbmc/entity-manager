{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f0e0360f_ac76b426",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2023-01-24T21:28:26Z",
      "side": 1,
      "message": "lgtm",
      "revId": "76c0bcade61088f119c026d66f9f58dbc60391fb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6127a5be_e42d77f7",
        "filename": "configurations/fbyv2.json",
        "patchSetId": 3
      },
      "lineNbr": 585,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-25T04:03:20Z",
      "side": 1,
      "message": "Seems like you could make the same argument here about \"why do you have a chassis and a board\".  Again the chassis + board serial are the same and contained on the same EEPROM (the board is simply screwed into the sheet metal to make a chassis).\n\nThe Yv2 baseboard contains the EEPROM, which contains the serial number.  By nature of it being a baseboard we can assume it is also screwed into a chassis.  Are you suggesting we need a separate path?",
      "revId": "76c0bcade61088f119c026d66f9f58dbc60391fb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f26523ba_8032a91d",
        "filename": "configurations/fbyv2.json",
        "patchSetId": 3
      },
      "lineNbr": 585,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-02-17T18:36:08Z",
      "side": 1,
      "message": "\u003e Seems like you could make the same argument here about \"why do you have a chassis and a board\".  Again the chassis + board serial are the same and contained on the same EEPROM (the board is simply screwed into the sheet metal to make a chassis).\n\u003e \n\u003e The Yv2 baseboard contains the EEPROM, which contains the serial number.  By nature of it being a baseboard we can assume it is also screwed into a chassis.  Are you suggesting we need a separate path?\n\nYes.  In the simplest example, the serial number of the chassis is not the same as the serial number of the motherboard, so they need separate paths to represent the components (even if you might not have the chassis serial number available).",
      "parentUuid": "6127a5be_e42d77f7",
      "revId": "76c0bcade61088f119c026d66f9f58dbc60391fb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d93d932_99f93bcc",
        "filename": "configurations/fbyv2.json",
        "patchSetId": 3
      },
      "lineNbr": 585,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2023-03-21T15:27:58Z",
      "side": 1,
      "message": "In Redfish, both Item.Board and Item.Chassis interface is used to display the board name under /redfish/v1/Chassis/\u003cboard\u003e. \n\nI have tried creating two separate paths in json file for the interface Item.Board and Item.Chassis. In entity-manager, two dbus paths are created in the name of Twin_Lakes_1 (board type) and Twin_Lakes_1_Chassis (chassis type).\n\nIn redfish, 8 paths is created under /redfish/v1/Chassis, Since it fetches xyz.openbmc_project.Inventory.Item.Board and xyz.openbmc_project.Inventory.Item.Chassis interface under /redfish/v1/Chassis.\n\nExample:\n\n/redfish/v1/Chassis/Twin_Lakes_1\n/redfish/v1/Chassis/Twin_Lakes_2\n/redfish/v1/Chassis/Twin_Lakes_3\n/redfish/v1/Chassis/Twin_Lakes_4\n/redfish/v1/Chassis/Twin_Lakes_1_Chassis\n/redfish/v1/Chassis/Twin_Lakes_2_Chassis\n/redfish/v1/Chassis/Twin_Lakes_3_Chassis\n/redfish/v1/Chassis/Twin_Lakes_4_Chassis",
      "parentUuid": "f26523ba_8032a91d",
      "revId": "76c0bcade61088f119c026d66f9f58dbc60391fb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0b48ebc_f981fa5c",
        "filename": "configurations/twinlake.json",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-01-24T23:40:45Z",
      "side": 1,
      "message": "Type: Board, Then exposing Item.Chassis doesn\u0027t seem correct.",
      "range": {
        "startLine": 21,
        "startChar": 13,
        "endLine": 21,
        "endChar": 18
      },
      "revId": "76c0bcade61088f119c026d66f9f58dbc60391fb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8317af31_24150ad3",
        "filename": "configurations/twinlake.json",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-25T04:01:43Z",
      "side": 1,
      "message": "Do we need it to generate as separate path for the Chassis itself then?  There isn\u0027t any identifying information (FRU) for the Chassis, really and I\u0027m not sure if you would call the bits of plastic much of a Chassis anyhow.\n\n\nTwinlakes is a compute card which plugs into a Yv2.  It is a board but it also acts as a sub-chassis (blade).  I\u0027m not sure the best way to model that.",
      "parentUuid": "b0b48ebc_f981fa5c",
      "range": {
        "startLine": 21,
        "startChar": 13,
        "endLine": 21,
        "endChar": 18
      },
      "revId": "76c0bcade61088f119c026d66f9f58dbc60391fb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f48f303_81b0b36e",
        "filename": "configurations/twinlake.json",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-02-17T18:36:08Z",
      "side": 1,
      "message": "\u003e Do we need it to generate as separate path for the Chassis itself then?  There isn\u0027t any identifying information (FRU) for the Chassis, really and I\u0027m not sure if you would call the bits of plastic much of a Chassis anyhow.\n\nYes.  If you can hold something in your hand separately, then it gets its own file.  Just because it\u0027s not FRU detectable doesn\u0027t change that.  There are probe statements designed for \"I know this thing is present, so I know this other thing is present as well\" (ie, the present probe type).\n\n\u003e \n\u003e \n\u003e Twinlakes is a compute card which plugs into a Yv2.  It is a board but it also acts as a sub-chassis (blade).  I\u0027m not sure the best way to model that.\n\nTwo files, one for the motherboard itself, and one for the sub chassis.  If the sub chassis isn\u0027t detectable through a field on the IPMI eeprom FRU (usually chassis section vs board section), then just probe on the motherboard existing.",
      "parentUuid": "8317af31_24150ad3",
      "range": {
        "startLine": 21,
        "startChar": 13,
        "endLine": 21,
        "endChar": 18
      },
      "revId": "76c0bcade61088f119c026d66f9f58dbc60391fb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d16b9de4_93a48696",
        "filename": "configurations/twinlake.json",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2023-03-21T15:27:58Z",
      "side": 1,
      "message": "Type is changed from Board to Chassis. Hence, ChassisType can be exposed in the inventory only under Inventory.Item.Chassis.",
      "parentUuid": "5f48f303_81b0b36e",
      "range": {
        "startLine": 21,
        "startChar": 13,
        "endLine": 21,
        "endChar": 18
      },
      "revId": "76c0bcade61088f119c026d66f9f58dbc60391fb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}