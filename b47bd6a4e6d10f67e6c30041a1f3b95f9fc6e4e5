{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "18d213e2_9e9efbd5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2023-06-06T21:57:59Z",
      "side": 1,
      "message": "I think this goes against the intended spirit of entity-manager configurations in that it exposes D-Bus internals in the config files, assuming this is something we still want to enforce.",
      "revId": "b47bd6a4e6d10f67e6c30041a1f3b95f9fc6e4e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c83ded3_b586ca4f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1001584
      },
      "writtenOn": "2023-06-22T16:30:17Z",
      "side": 1,
      "message": "I believe Associations arent D-Bus internals but rather a D-Bus feature.\n\nThe problem I run into without any way to generate associations through user-facing configs is this:\n\nIn a multi-host system, we dont neccesarily know where the Item.System objects are going to be created as there is not standardized assumption or place for it to be done. This means that if we want to associate objects to this multi-host system, then it would require constant changes to every daemon to hardcode in the Item.System object it associates with. Populating these objects through EM would allow it to generate any associations and Item.System objects and make it client-configurable. It allows us to change what associations are being made if the Item.System object is different across systems and allows us to update associations without any changes to code.",
      "parentUuid": "18d213e2_9e9efbd5",
      "revId": "b47bd6a4e6d10f67e6c30041a1f3b95f9fc6e4e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60b3b70c_0ff5bbe3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2023-06-23T14:45:47Z",
      "side": 1,
      "message": "There\u0027s nothing wrong with associations, hardcoding d-bus paths is the issue.  In fact further down in that same function the code is already creating associations, which would actually crash your daemon with a FileExists exception the way you have it coded now if you also wanted those containing/contained_by on the same card.\n\nIs the association you have in your example the actual one you\u0027re trying to create?  Because that already wouldn\u0027t work if the entity can plug into more than 1 slot as you couldn\u0027t hardcode the target object path, and I would be surprised if the $variable substitution worked inside JSON objects.",
      "parentUuid": "8c83ded3_b586ca4f",
      "revId": "b47bd6a4e6d10f67e6c30041a1f3b95f9fc6e4e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa778b38_e03edf16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1001584
      },
      "writtenOn": "2023-06-23T16:15:34Z",
      "side": 1,
      "message": "What do you mean by the following?\n\n`Is the association you have in your example the actual one you\u0027re trying to create? Because that already wouldn\u0027t work if the entity can plug into more than 1 slot as you couldn\u0027t hardcode the target object path, and I would be surprised if the $variable substitution worked inside JSON objects.`\n\nAlso how would I make use of the associations code mentioned here `In fact further down in that same function the code is already creating associations`?",
      "parentUuid": "60b3b70c_0ff5bbe3",
      "revId": "b47bd6a4e6d10f67e6c30041a1f3b95f9fc6e4e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68b5d69e_9fcfecd8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2023-06-23T16:21:32Z",
      "side": 1,
      "message": "Say you have a SystemCard entity of which there can be 4 plugged into some sort of parent chassis.\n\nSo in your SystemCard JSON, you\u0027re attempting to create an association to some host state object.  But how would you know which host state object to point at as you only have 1 JSON file? Presumably there are also 4?",
      "parentUuid": "fa778b38_e03edf16",
      "revId": "b47bd6a4e6d10f67e6c30041a1f3b95f9fc6e4e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "793d47bf_626e0726",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1001584
      },
      "writtenOn": "2023-06-23T16:32:16Z",
      "side": 1,
      "message": "If there were 4 SystemCard entities exposed by the chassis, then I was thinking that there would be a different exposes array element for each SystemCard? Each of which can have an association in the Associations property.\n\nAlso could you elaborate on how creating an association crashes the daemon? I thought associations were one-to-many relationships and cant crash daemons because all it does is add a Interface to an existing object path.\n\nLast comment: would it make more sense to have the system not be in the exposed by list but rather be its own object separate from the chassis and we can add the associations there?\n\nSomething like below?\n```\n[\n{\"Name\": \"Chassis\", \"Type\": \"Board\"}, \n{\"Name\": \"system1\", \"Type\": \"System\", \"Associations\": [{/*Associations Here*/}]}\n]\n```",
      "parentUuid": "68b5d69e_9fcfecd8",
      "revId": "b47bd6a4e6d10f67e6c30041a1f3b95f9fc6e4e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12c10e3d_68e4dd48",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2023-06-23T16:48:33Z",
      "side": 1,
      "message": "Are you able to describe at least in general terms what your system looks like?  Because in my head I have something like Meta\u0027s yosemite server, https://www.opencompute.org/products/6/wiwynn-yosemite-v2-server, which has 4 twin lakes processor cards that plug into it.  So there is 1 JSON file for the yosemite backplane, and 1 JSON file for the twin lakes card, of which 4 instances will be created.  And if each twin lakes is a System, then somehow it would have to know which system number it is.",
      "parentUuid": "793d47bf_626e0726",
      "revId": "b47bd6a4e6d10f67e6c30041a1f3b95f9fc6e4e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65509ee7_0b07449b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1001584
      },
      "writtenOn": "2023-06-23T17:01:41Z",
      "side": 1,
      "message": "I am using a QEMU to simulate a 1 BMC -\u003e 2 Host system. (Arbitrary number of CPUs)\n\nI have one JSON file for now representing the Chassis and inside the Chassis, I expose 2 host objects using the Exposes array. I wish to make associations from these hosts to their respective power control objects and thought I could do so by adding an associations property within each element of the Exposes list. Each system number is set by the element in the exposes list. I want to detach the concept of System separate from Processor, so assuming that 1 processor means 1 system dosent apply here which is why I submitted https://gerrit.openbmc.org/c/openbmc/entity-manager/+/61552 to use the concept of Item.System to represent system.",
      "parentUuid": "12c10e3d_68e4dd48",
      "revId": "b47bd6a4e6d10f67e6c30041a1f3b95f9fc6e4e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98e6980f_6f8f1edb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2023-06-26T16:59:25Z",
      "side": 1,
      "message": "What\u0027s the actual use for this association? You\u0027re writing some bmcweb code that has to tie together a host state object with a system inventory object?  Is it something you plan to upstream?\n\nWhat I\u0027m getting at is if this is something that everyone could use I think it would be better if entity-manager would just automatically create the association between the System and a host state object so that the code works for everyone, like how dbus-sensors automatically creates associations between sensors and the inventory object.\n\nThis probably means that there would have to be some sort of instance number in the JSON so that it would know which state object to associate with, like \"SystemInstance\".  In your case you could hardcode it, but for systems like in my example it would probably have to be filled in with a $variable like:  \"SystemInstance\": \"$SysInstance\".\n\nAlso I think that association names need to be reviewed first somewhere in phosphor-dbus-interfaces, so you may want to start looking into that too.",
      "parentUuid": "65509ee7_0b07449b",
      "revId": "b47bd6a4e6d10f67e6c30041a1f3b95f9fc6e4e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "396c5273_90c13429",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2023-07-17T21:37:41Z",
      "side": 1,
      "message": "Waiting for feedback here",
      "parentUuid": "98e6980f_6f8f1edb",
      "revId": "b47bd6a4e6d10f67e6c30041a1f3b95f9fc6e4e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41bdeaad_723d752f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1001584
      },
      "writtenOn": "2023-07-17T21:42:18Z",
      "side": 1,
      "message": "The use case is to associate a Item.System object with its respective power control object. The problem that I am running into is that I dont want to hardcode any associations in any codebase because that will just result in changes everytime a dbus object differs from expectation. I wanted associations between system and power control to be configurable using a config file which is what the code above is for.\n\n\u003eThis probably means that there would have to be some sort of instance number in the JSON so that it would know which state object to associate with, like \"SystemInstance\". In your case you could hardcode it, but for systems like in my example it would probably have to be filled in with a $variable like: \"SystemInstance\": \"$SysInstance\".\n\nThis could happen yes. I think making it such that the config file contains variables that can be filled in by EM\u0027s code would be a great idea. I just want some way to configure associations between system and power control since any other daemon cant create an association as the associated objects could be changing per system, but the configurability using EM\u0027s config files allows it to be system-agnostic.",
      "parentUuid": "396c5273_90c13429",
      "revId": "b47bd6a4e6d10f67e6c30041a1f3b95f9fc6e4e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50b74afb_a0730230",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2023-07-17T21:55:01Z",
      "side": 1,
      "message": "Sounds doable.  First I would put up a commit to define the association like https://github.com/openbmc/phosphor-dbus-interfaces/blob/2117deabad40f9ac63815f3338e7ac3e1e3fe397/yaml/xyz/openbmc_project/Led/Group.interface.yaml#L10  on one of the endpoint interfaces so that everyone can agree on the association names.\n\nThen you could write EM code to look up the interface on the other end with the mapper, identifying it by the instance or whatever, and creating the association definition.",
      "parentUuid": "41bdeaad_723d752f",
      "revId": "b47bd6a4e6d10f67e6c30041a1f3b95f9fc6e4e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6d22023_4484d941",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1001584
      },
      "writtenOn": "2023-07-17T21:58:52Z",
      "side": 1,
      "message": "so you are saying the association should be created without even edits to the config file?\n\nI am confused on what you mean by \"Then you could write EM code to look up the interface on the other end with the mapper, identifying it by the instance or whatever, and creating the association definition.\"\n\nCould you elaborate a bit more?\n\nThank you for the quick response!",
      "parentUuid": "50b74afb_a0730230",
      "revId": "b47bd6a4e6d10f67e6c30041a1f3b95f9fc6e4e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a416d62b_e29332fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2023-07-17T22:07:05Z",
      "side": 1,
      "message": "That /xyz/openbmc_project/state/host1 path must have a certain interface on it you need?  So you could use the GetSubTree or GetSubTreePaths mapper methods to give you all of the object paths with that interface, and then you could find the specific path you wanted wanted by checking if the object path ends in the instance you want.\nMaybe like:\n\"Exposes\": [\n    {\n        \"Name\": \"system1\",\n        \"Type\": \"System\",\n        \"SystemInstance\": 1\n    }\n     \nto make it look for  /xyz/openbmc_project/state/host1.\n\nI guess if the code you\u0027re writing also has to work on single System configurations, then if SystemInstance isn\u0027t there it could default to whatever the object path is when there is just 1.",
      "parentUuid": "a6d22023_4484d941",
      "revId": "b47bd6a4e6d10f67e6c30041a1f3b95f9fc6e4e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "863481c1_d08dced3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1001584
      },
      "writtenOn": "2023-07-17T22:24:07Z",
      "side": 1,
      "message": "Yes I see what you mean by SystemInstance. So that means the host suffix on the power control variable is fixed and we require the dbus object to be in the correct naming format for the association to be created. Would we run into issues if this could somehow not be the case? Bad naming of power control dbus objects could cause issues here?\n\nIs the assumption of power control dbus object naming format an assumption I can make for all systems of openbmc?",
      "parentUuid": "a416d62b_e29332fe",
      "revId": "b47bd6a4e6d10f67e6c30041a1f3b95f9fc6e4e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "680f2f15_bf097ece",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2023-07-18T21:17:09Z",
      "side": 1,
      "message": "I\u0027m not sure if there would ever be a case where an entity-manager System config would be used across multiple power control implementations.\n\nI guess another way to do is by adding a new property (and interface if necessary) on the power control side of things to match things up.",
      "parentUuid": "863481c1_d08dced3",
      "revId": "b47bd6a4e6d10f67e6c30041a1f3b95f9fc6e4e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5e90262_1661405b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1001584
      },
      "writtenOn": "2023-08-09T20:56:45Z",
      "side": 1,
      "message": "Okay the steps forward are for me to have something like\n\nExposes: [\n  {\n    \"Name\": \"system1\",\n    \"Type\": \"system\",\n    \"SystemId\": 1\n  }\n]\n\nAnd have this automaticaly hook up to a power control object if it can find one with the following requirements\n\n1. Under /xyz/openbmc_project/state\n2. filename ends with $SystemId",
      "parentUuid": "680f2f15_bf097ece",
      "revId": "b47bd6a4e6d10f67e6c30041a1f3b95f9fc6e4e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbcfea50_3bbeb82c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2023-08-17T21:49:37Z",
      "side": 1,
      "message": "Is there a specific interface on that path you\u0027re interested in?",
      "parentUuid": "f5e90262_1661405b",
      "revId": "b47bd6a4e6d10f67e6c30041a1f3b95f9fc6e4e5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}