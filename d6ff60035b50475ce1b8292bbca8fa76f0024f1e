{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "546f7712_a693610b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-12T09:44:59Z",
      "side": 1,
      "message": "Can you please rebase this patch on top of master branch (rather than BIOS def patch).",
      "revId": "d6ff60035b50475ce1b8292bbca8fa76f0024f1e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d530b08b_f29dd113",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1002253
      },
      "writtenOn": "2025-02-12T11:14:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "546f7712_a693610b",
      "revId": "d6ff60035b50475ce1b8292bbca8fa76f0024f1e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c943805b_58a4640e",
        "filename": "schemas/firmware.json",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T18:28:11Z",
      "side": 1,
      "message": "I don\u0027t think the current EEPROM definition supports this today?  Can we get this split into two commits.\n\n1 commit for the existing functionality that we\u0027re (correctly) making enforced in json schema\n2nd commit for the new functions you\u0027re adding?\n\nIt\u0027s not clear to me why a fru eeprom would have an iana and device compatibility descriptor, but having it separate will get a commit message that describes why its needed, so that should help.",
      "range": {
        "startLine": 123,
        "startChar": 17,
        "endLine": 123,
        "endChar": 29
      },
      "revId": "d6ff60035b50475ce1b8292bbca8fa76f0024f1e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cb44208_354ecd5e",
        "filename": "schemas/firmware.json",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 1002253
      },
      "writtenOn": "2025-02-24T02:07:19Z",
      "side": 1,
      "message": "You can refer to https://docs.google.com/document/d/1YdO_EXCRO9UQnmot6nbGWw88QTXv76-lbiKNrVPjaSI/edit?tab\u003dt.0#heading\u003dh.46v7asziecay and https://gerrit.openbmc.org/c/openbmc/docs/+/74653.\nThe IANA and device compatibility descriptor are utilized in the new code updaters for image validation.",
      "parentUuid": "c943805b_58a4640e",
      "range": {
        "startLine": 123,
        "startChar": 17,
        "endLine": 123,
        "endChar": 29
      },
      "revId": "d6ff60035b50475ce1b8292bbca8fa76f0024f1e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40534fac_4174ab32",
        "filename": "schemas/firmware.json",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-24T02:36:38Z",
      "side": 1,
      "message": "First one looks to be a private google doc that isn\u0027t public and isn\u0027t related to openbmc, so not really sure what to do with that.\n\nI\u0027m not really sure how https://gerrit.openbmc.org/c/openbmc/docs/+/74653 got approved, given that IANA isn\u0027t really a property of an eeprom or of a piece of hardware and violates some of the design of entity-manager in that it adds openbmc-specific and company specific software identifiers to a hardware specific file.  I\u0027m not sure how that would work in practice unless you assume that each company never shares the same hardware.\n\nI\u0027ll read more.  Maybe there\u0027s something in the design that deals with that?",
      "parentUuid": "3cb44208_354ecd5e",
      "range": {
        "startLine": 123,
        "startChar": 17,
        "endLine": 123,
        "endChar": 29
      },
      "revId": "d6ff60035b50475ce1b8292bbca8fa76f0024f1e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "047ccf30_9f3d456c",
        "filename": "schemas/firmware.json",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-24T02:38:29Z",
      "side": 1,
      "message": "https://gerrit.openbmc.org/c/openbmc/docs/+/74653\n\nshows adding it to a CPLD, where it might make sense (a given CPLD is made by a known manufacturer)\n\nThis is adding it to an eeprom device.  I suspect this has made some missteps on what the above doc intended.",
      "parentUuid": "40534fac_4174ab32",
      "range": {
        "startLine": 123,
        "startChar": 17,
        "endLine": 123,
        "endChar": 29
      },
      "revId": "d6ff60035b50475ce1b8292bbca8fa76f0024f1e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0976dd6d_b6038531",
        "filename": "schemas/firmware.json",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-03-02T04:51:56Z",
      "side": 1,
      "message": "\u003e https://gerrit.openbmc.org/c/openbmc/docs/+/74653\n\u003e \n\u003e shows adding it to a CPLD, where it might make sense (a given CPLD is made by a known manufacturer)\n\u003e \n\u003e This is adding it to an eeprom device.  I suspect this has made some missteps on what the above doc intended.\n\nHere EEPROM is not the FRU EEPROM but its the EERPOM for a device such as Retimer (for example, https://github.com/torvalds/linux/blob/master/drivers/hwmon/pt5161l.c#L666) whose Firmware Image resides on that.",
      "parentUuid": "047ccf30_9f3d456c",
      "range": {
        "startLine": 123,
        "startChar": 17,
        "endLine": 123,
        "endChar": 29
      },
      "revId": "d6ff60035b50475ce1b8292bbca8fa76f0024f1e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33f15702_3e8c9027",
        "filename": "schemas/firmware.json",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 1002253
      },
      "writtenOn": "2025-03-05T01:22:37Z",
      "side": 1,
      "message": "@ed@tanous.net The intent here is to manage firmware updates for EEPROM-based devices, such as Retimers, in a manner similar to CPLD firmware updates. Let me know if you have any further concerns. Thanks!",
      "parentUuid": "0976dd6d_b6038531",
      "range": {
        "startLine": 123,
        "startChar": 17,
        "endLine": 123,
        "endChar": 29
      },
      "revId": "d6ff60035b50475ce1b8292bbca8fa76f0024f1e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57ae24d9_2408d388",
        "filename": "schemas/firmware.json",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-04-14T18:46:49Z",
      "side": 1,
      "message": "Right, we already have an EEPROM type.  Does this differ in the actual hardware interfaces?  Or just how software treats it (reads through fru device instead of firmware update daemon).",
      "parentUuid": "33f15702_3e8c9027",
      "range": {
        "startLine": 123,
        "startChar": 17,
        "endLine": 123,
        "endChar": 29
      },
      "revId": "d6ff60035b50475ce1b8292bbca8fa76f0024f1e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c00fd11_3f121aee",
        "filename": "schemas/firmware.json",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 1002253
      },
      "writtenOn": "2025-04-17T08:58:58Z",
      "side": 1,
      "message": "It\u0027s a difference in how the software handles it. For example, with a Retimer, the firmware update daemon reads the firmware version from the Retimer itself but writes the firmware image to the external EEPROM connected to it.",
      "parentUuid": "57ae24d9_2408d388",
      "range": {
        "startLine": 123,
        "startChar": 17,
        "endLine": 123,
        "endChar": 29
      },
      "revId": "d6ff60035b50475ce1b8292bbca8fa76f0024f1e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}