{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e180c2e7_26e9a7a5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2023-07-14T13:32:03Z",
      "side": 1,
      "message": "Unfortunately, the cache is needed so properties changed by users like thresholds are persisted.\n\nI may be missing something, but if you can come up with a method of saving those outside of the JSON then I think we could get rid of the JSON file altogether.",
      "revId": "7bf78c246c49399263057e2ec6eb97cd3154a98b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "398c49d1_300c9b66",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2023-07-14T14:54:24Z",
      "side": 1,
      "message": "what is the usecase for users changing thresholds via dbus and such?\n\nthresholds are provided in the configuration for PSU, Board, Chassis\nthere is no need to edit the configuration for thresholds as it is already present.\n\nusers can also edit the configuration files in /usr/share/entity-manager/configurations/  and restart the service. the changes will be applied and persisted.\n\nthere is no need to have separate mechanism to change the configuration. one mechanism is enough.\n\nthe current behavior is confusing and inconsistent. users expect a systemd service to reload all its configuration when it is restarted.",
      "parentUuid": "e180c2e7_26e9a7a5",
      "revId": "7bf78c246c49399263057e2ec6eb97cd3154a98b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee60379c_e7e47204",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2023-07-14T15:13:50Z",
      "side": 1,
      "message": "Our systems have never used it so I\u0027m not intimately familiar, but there\u0027s just a few writable properties which are specified here: https://github.com/openbmc/entity-manager/blob/a591d6c0b144ebc81e8175651364b2fa29f05cc8/src/entity_manager.cpp#L64\n\nI don\u0027t really know why fan properties need to be persisted, @Zhikui do you know? I think there are probably redfish interfaces for fan tuning.\n\nAs for the thresholds I think there are external interfaces to modify them via Redfish and IPMI and they are then saved here.\n\nWhen EM was first written, or maybe when it was ported over from Intel\u0027s world, it didn\u0027t even put anything on D-Bus and just saved everything in system.json which is why it even exists in the first place.\n\nI would be all for moving away from it, we just don\u0027t want to break the people that need the persistence.",
      "parentUuid": "398c49d1_300c9b66",
      "revId": "7bf78c246c49399263057e2ec6eb97cd3154a98b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8b20761_ea13e88b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2023-07-17T07:26:58Z",
      "side": 1,
      "message": "one way to look at it would be that the people using these writeable properties were using EM wrong since the correct values could have been provided by the initial configuration files. which they can update without issue with this new change and their change will actually be applied. \n\nas changing the properties via dbus is not as flexible and fairly limited, i expect the usage of this feature to also be limited.",
      "parentUuid": "ee60379c_e7e47204",
      "revId": "7bf78c246c49399263057e2ec6eb97cd3154a98b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edb9db0b_d6636a54",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2023-07-17T20:27:49Z",
      "side": 1,
      "message": "There is code to detect fwVersionIsSame() https://github.com/openbmc/entity-manager/blob/master/src/utils.hpp#L95. In your use case was the firmware version the same, but json file content is different?\n\nHow would a customer/user update threshold, uploading a new json? Through what interface? \n\nCurrent implementation, saving the thresholds in system.json is not perfect. For example, FW update may revert that back. An option is to create persistent json files that override the build in config.",
      "parentUuid": "f8b20761_ea13e88b",
      "revId": "7bf78c246c49399263057e2ec6eb97cd3154a98b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7979d787_7653fd92",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2023-07-18T07:43:58Z",
      "side": 1,
      "message": "customer/user would \nscp myboard.json root@mybmc:/usr/share/entity-manager/configurations/\n\nto upload the new configuration. then restart the service to apply the configuration. with this approach, everything can be adjusted, it is not limited in any way.",
      "parentUuid": "edb9db0b_d6636a54",
      "revId": "7bf78c246c49399263057e2ec6eb97cd3154a98b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7cea7a2_f0bcea04",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2023-07-29T17:07:00Z",
      "side": 1,
      "message": "I am not sure that is an acceptable method for all users. Scp onto the file system may not be permitted due to security reasons.\nWe need continue to support ipmi commands to adjust thresholds and the change would persist across power cycle until firmware update or factory reset",
      "parentUuid": "7979d787_7653fd92",
      "revId": "7bf78c246c49399263057e2ec6eb97cd3154a98b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10964609_aec02bbe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2023-07-31T09:14:17Z",
      "side": 1,
      "message": "Have thought of a new option. \n\nTo provide the expected behavior for people who use file based configuration, we could only write /var/configuration/system.json in cases where there is actually changes being made through dbus properties or other means.\n\nThere could be a small print to the journal on each start of entity-manager\nindicating that it is using a /var/configuration/system.json,\nin the case that someone is actually using that mechanism, or has been using it,\nto help users understand where their configuration is coming from.\n\nBut that print is optional for me. \n\nPlease let me know if this would be an acceptable solution, to provide the expected behavior for both users\nwho use file based config and those who want to change stuff via dbus/ipmi.",
      "parentUuid": "a7cea7a2_f0bcea04",
      "revId": "7bf78c246c49399263057e2ec6eb97cd3154a98b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3b3aead_2173f70c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-14T15:26:25Z",
      "side": 1,
      "message": "Restarting the service wasn\u0027t intended to change the state, only on hardware changes was the state supposed to change.",
      "range": {
        "startLine": 10,
        "startChar": 26,
        "endLine": 11,
        "endChar": 17
      },
      "revId": "7bf78c246c49399263057e2ec6eb97cd3154a98b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a5b4af0_dddac7a0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2023-07-14T16:11:37Z",
      "side": 1,
      "message": "updated the commit message.",
      "parentUuid": "a3b3aead_2173f70c",
      "range": {
        "startLine": 10,
        "startChar": 26,
        "endLine": 11,
        "endChar": 17
      },
      "revId": "7bf78c246c49399263057e2ec6eb97cd3154a98b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2043497_f365a8e3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-07-14T15:26:25Z",
      "side": 1,
      "message": "Please detect that the detection of new devices works properly.  I suspect that it doesn\u0027t anymore, because this mechanism was how it functioned.",
      "revId": "7bf78c246c49399263057e2ec6eb97cd3154a98b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "526c79f5_eb431af5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2023-07-14T16:11:37Z",
      "side": 1,
      "message": "detection of new devices still works for me. calling ReScan method on FruDevice and EntityManager results in updated dbus tree when e.g. a PSU is added to the system.",
      "parentUuid": "f2043497_f365a8e3",
      "revId": "7bf78c246c49399263057e2ec6eb97cd3154a98b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}