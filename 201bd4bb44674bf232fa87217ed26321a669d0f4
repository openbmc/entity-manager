{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eab3976a_e6f95156",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-17T19:54:03Z",
      "side": 1,
      "message": "Added comments to the specific pain points I\u0027ve run into with the CI tool suggestions",
      "revId": "201bd4bb44674bf232fa87217ed26321a669d0f4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d53660a0_f77f45b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-10-21T18:27:41Z",
      "side": 1,
      "message": "Is there a reason you made this a separate commit?  The commit that has the issue hasn\u0027t merged yet and will need to pass CI before it can merge, so you\u0027d just fix up that one.",
      "revId": "201bd4bb44674bf232fa87217ed26321a669d0f4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6cb4df30_61a6a2a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-23T18:26:16Z",
      "side": 1,
      "message": "My thinking was that I had \u0027working code\u0027 I wanted to start discussion on, but CI tool passes were suggesting changes that broke the build outright -- so I was hoping to separate discussions about the odd changes being suggested from the working code discussion.\n\nI plan to mark this one as \u0027abandoned\u0027 soon, as I think I\u0027ve worked out the cause behind the last \u0027build-breaking suggestion\u0027 being put out by a clang-tidy rule in the entity-manager repo.",
      "parentUuid": "d53660a0_f77f45b6",
      "revId": "201bd4bb44674bf232fa87217ed26321a669d0f4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57743120_586df2a2",
        "filename": "src/dt-vpd-parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-17T19:54:03Z",
      "side": 1,
      "message": "The only place I can find an OBMC instances of \u0027__final_awaitable\u0027 is as a set of private structs linked to async API: https://github.com/search?q\u003dorg%3Aopenbmc%20final_awaitable\u0026type\u003dcode\n\nAmong other related-complaints, console output shows\n\n\u003e/usr/local/include/sdbusplus/async/stdexec/task.hpp:366:12: note: declared private here\n\u003e  366 |     struct __final_awaitable\n\nI don\u0027t even understand what the CI tool is trying to do here.",
      "range": {
        "startLine": 13,
        "startChar": 18,
        "endLine": 13,
        "endChar": 35
      },
      "revId": "201bd4bb44674bf232fa87217ed26321a669d0f4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8ce2241_e9d51b50",
        "filename": "src/dt-vpd-parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-18T17:33:00Z",
      "side": 1,
      "message": "This is not a proper change.  What was the original failure?",
      "parentUuid": "57743120_586df2a2",
      "range": {
        "startLine": 13,
        "startChar": 18,
        "endLine": 13,
        "endChar": 35
      },
      "revId": "201bd4bb44674bf232fa87217ed26321a669d0f4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec5a9171_0e203491",
        "filename": "src/dt-vpd-parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-18T17:36:22Z",
      "side": 1,
      "message": "Here\u0027s console output from \u0027original code\u0027 (pre-CI pass) where a clang-tidy rule suggests the change shown here\nhttps://jenkins.openbmc.org/job/ci-repository/93332/console",
      "parentUuid": "a8ce2241_e9d51b50",
      "range": {
        "startLine": 13,
        "startChar": 18,
        "endLine": 13,
        "endChar": 35
      },
      "revId": "201bd4bb44674bf232fa87217ed26321a669d0f4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "227a1152_489b96d5",
        "filename": "src/dt-vpd-parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-18T17:39:54Z",
      "side": 1,
      "message": "While I don\u0027t understand the tool\u0027s final code suggestion/output, I am reading up on the clang formatting rules, and am coming to understand that the clang-tidy rule is complaining that I\u0027m referencing static variable reqDBusInterface from inside this thing.\n\nI assume it would be preferred that I simply have this reference a non-static variable, rather that add a //NOLINT(rule) line here to try to skip the check.",
      "parentUuid": "ec5a9171_0e203491",
      "range": {
        "startLine": 13,
        "startChar": 18,
        "endLine": 13,
        "endChar": 35
      },
      "revId": "201bd4bb44674bf232fa87217ed26321a669d0f4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b93d9faa_b164b435",
        "filename": "src/dt-vpd-parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-18T18:05:00Z",
      "side": 1,
      "message": "```\n../src/dt-vpd-parser.cpp:10:15: error: static member accessed through instance [readability-static-accessed-through-instance,-warnings-as-errors]\n   10 |     ctx.spawn([](sdbusplus::async::context\u0026 ctx) -\u003e sdbusplus::async::task\u003c\u003e {\n```\n\nThe \"fixup\" for this from clang-tidy is busted.  Yes, making a real fix is preferred over NOLINT.  We generally don\u0027t like to put those in.",
      "parentUuid": "227a1152_489b96d5",
      "range": {
        "startLine": 13,
        "startChar": 18,
        "endLine": 13,
        "endChar": 35
      },
      "revId": "201bd4bb44674bf232fa87217ed26321a669d0f4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3eecd19_d5384a34",
        "filename": "src/dt-vpd-parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-23T18:26:16Z",
      "side": 1,
      "message": "I discovered I could fix the \"static member accessed through instance\" complaint by calling spawn from\n\nsdbusplus::async::context.spawn()\ninstead of (context instance).spawn()\n\nwhich incidentally, all the Async API examples I\u0027ve seen so far call spawn from an instance:\n\nhttps://github.com/openbmc/sdbusplus/blob/master/example/calculator-aserver.cpp\n\nhttps://github.com/openbmc/sdbusplus/blob/master/example/calculator-client.cpp\n\nhttps://github.com/openbmc/sdbusplus/blob/master/example/coroutine-example.cpp\n\nAssuming this \u0027fix\u0027 isn\u0027t quietly breaking something somewhere-- do you think the Async API examples in SDBusPlus should be updated to call spawn this way too?",
      "parentUuid": "b93d9faa_b164b435",
      "range": {
        "startLine": 13,
        "startChar": 18,
        "endLine": 13,
        "endChar": 35
      },
      "revId": "201bd4bb44674bf232fa87217ed26321a669d0f4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bc1bba2_19c7d4d6",
        "filename": "src/dt-vpd-parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-23T18:51:28Z",
      "side": 1,
      "message": "Ah, nevermind. I thought I\u0027d got a working build, but something just hadn\u0027t saved before build. Back to the drawing board--\n\nAs far as I can tell, this \u0027bad\u0027 line is being appended to *anything* inside ctx.spawn() calls, whether a lamdba or a bare-bones simple \n\nauto startup() -\u003e sdbusplus::async::task\u003c\u003e \n{\n co_return;\n}\n...\nctx.spawn(startup());\n\ngets turned into\n\nauto exec::__task::basic_task\u003c\n                  void, exec::__task::__default_task_context_impl\u003c\n                            exec::__task::__scheduler_affinity::__sticky\u003e\u003e::\n                  __final_awaitable::\n                  startup() -\u003e sdbusplus::async::task\u003c\u003e \n{\n...",
      "parentUuid": "b3eecd19_d5384a34",
      "range": {
        "startLine": 13,
        "startChar": 18,
        "endLine": 13,
        "endChar": 35
      },
      "revId": "201bd4bb44674bf232fa87217ed26321a669d0f4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f881d979_79664132",
        "filename": "src/dt-vpd-parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-24T19:33:41Z",
      "side": 1,
      "message": "I\u0027ve confirmed we can avoid the CI tool issue entirely by switching away from the ctx.spawn() calls used in the Async API examples, and replacing\n\n\u003ectx.spawn([](sdbusplus::async::context\u0026 ctx) -\u003e sdbusplus::async::task\u003c\u003e {\n\u003e        ctx.request_name(reqDBusName);\n\u003e        co_return;\n\u003e    }(ctx));\n\n//anything passed to ctx.spawn from inside main() will have \"exec::...__final_awaitable::\" appended to it by the CI tool unless NOLINTNEXTLINE(readability-static-accessed-through-instance) is set\n\nwith\n\n\u003e std::thread nameReqThread([\u0026ctx] { ctx.request_name(reqDBusName); });\n\u003e nameReqThread.join();\n\nIt\u0027s confirmed working on a live system. \n\nYou worked on the SDBusPlus Async API, correct? Does this seem like a reasonable workaround for the clang-tidy complaints in Entity-Manager?\n\nI\u0027ll be pushing the updated source for discussion to the parent PR 75349: service: device-tree node vpd to d-bus hw id data | https://gerrit.openbmc.org/c/openbmc/entity-manager/+/75349\n\nand marking this PR as closed. If we want to roll back to relying on ctx.spawn, we can continue discussion on the parent PR, since the \"I don\u0027t understand what\u0027s even happening\" level CI issues seem to be resolved now.\n\nThanks for helping out on this stuff!",
      "parentUuid": "7bc1bba2_19c7d4d6",
      "range": {
        "startLine": 13,
        "startChar": 18,
        "endLine": 13,
        "endChar": 35
      },
      "revId": "201bd4bb44674bf232fa87217ed26321a669d0f4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "973c32ee_b90f1fd8",
        "filename": "src/machinecontext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-17T19:54:03Z",
      "side": 1,
      "message": "If this function is marked as static like the CI tool suggests, it breaks the lambda closures.\n\nIf I move the creation of this map into the populateMachineContext() function instead of here, the CI tool wants to mark the populateMachineContext() function as static instead, which also breaks the lambda closures in the map.",
      "range": {
        "startLine": 26,
        "startChar": 12,
        "endLine": 26,
        "endChar": 13
      },
      "revId": "201bd4bb44674bf232fa87217ed26321a669d0f4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ef653ec_a819bf23",
        "filename": "src/machinecontext.hpp",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-17T19:54:03Z",
      "side": 1,
      "message": "The map being returned ties a device-tree path string to a lambda function with a by-reference closure used update a MachineContext object\u0027s inherited properties.\n\nMaking a function that uses this map static breaks the by-reference closure.",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 11
      },
      "revId": "201bd4bb44674bf232fa87217ed26321a669d0f4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ],
  "submitRequirementResults": []
}