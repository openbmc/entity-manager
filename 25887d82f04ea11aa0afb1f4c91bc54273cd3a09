{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8aab3185_3a9778a4",
        "filename": "src/fru_device/fru_device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2025-09-30T13:47:50Z",
      "side": 1,
      "message": "Would it really complain if you left this out?",
      "range": {
        "startLine": 134,
        "startChar": 4,
        "endLine": 134,
        "endChar": 20
      },
      "revId": "25887d82f04ea11aa0afb1f4c91bc54273cd3a09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71cbe7d3_2eb12d8e",
        "filename": "src/fru_device/fru_device.cpp",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T13:57:08Z",
      "side": 1,
      "message": "It does not complain...\n\nI had thought it would say something about\nvariable which is written but never read from.\n\nRemoved it.",
      "parentUuid": "8aab3185_3a9778a4",
      "range": {
        "startLine": 134,
        "startChar": 4,
        "endLine": 134,
        "endChar": 20
      },
      "revId": "25887d82f04ea11aa0afb1f4c91bc54273cd3a09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91a77643_bd80fb94",
        "filename": "src/utils.hpp",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-09-29T11:00:46Z",
      "side": 1,
      "message": "Can we use std::next here to avoid the cppcoreguidelines-pro-bounds-pointer-arithmetic?",
      "range": {
        "startLine": 84,
        "startChar": 36,
        "endLine": 84,
        "endChar": 59
      },
      "revId": "25887d82f04ea11aa0afb1f4c91bc54273cd3a09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee1d192d_9815b9c8",
        "filename": "src/utils.hpp",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-29T11:17:08Z",
      "side": 1,
      "message": "There was some idea to do as bmcweb does\n\n`std::from_chars(value.begin(), value.end(), query.expandLevel);`\n\nhttps://github.com/openbmc/bmcweb/blob/f7e62c142ced153e9400b519bdd66062dd6bbf0e/redfish-core/include/utils/query_param.hpp#L292\n\nDoing `std::next(s.begin(), s.size());` compares equal to `s.end()`\nand the time is constant in both cases.\n\nIt looks like it could work and since bmcweb does it, it does compile but i had trouble understanding how the iterator gets converted to a pointer.\n\nApplied your suggestion.",
      "parentUuid": "91a77643_bd80fb94",
      "range": {
        "startLine": 84,
        "startChar": 36,
        "endLine": 84,
        "endChar": 59
      },
      "revId": "25887d82f04ea11aa0afb1f4c91bc54273cd3a09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}