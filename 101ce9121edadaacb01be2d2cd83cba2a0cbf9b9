{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "62f3dbbc_3b25f33c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-07-29T13:27:41Z",
      "side": 1,
      "message": "Let\u0027s split the wrapper for ObjectMapper into a separate class and use the opportunity to get rid of the related inline callbacks.\n\nObjectMapper is a fairly standard dependency and we do not need to mix it up with any other functionality.",
      "revId": "101ce9121edadaacb01be2d2cd83cba2a0cbf9b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d3e1977_59f4e4ab",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-07-29T13:27:41Z",
      "side": 1,
      "message": "I assume that\u0027s a dataflow diagram.\n\nCan we restructure the diagram to visualize how the code would work with this patch, at the current stage of development.\n\nBecause currently we do not have `InventoryManager` class.",
      "revId": "101ce9121edadaacb01be2d2cd83cba2a0cbf9b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "482565c0_131184aa",
        "filename": "src/entity_manager/entity_manager.cpp",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-07-29T13:27:41Z",
      "side": 1,
      "message": "leftover semicolon ðŸ˜„",
      "revId": "101ce9121edadaacb01be2d2cd83cba2a0cbf9b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29d12c28_3d1e25aa",
        "filename": "src/entity_manager/entity_manager.cpp",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1002222
      },
      "writtenOn": "2025-07-30T06:35:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "482565c0_131184aa",
      "revId": "101ce9121edadaacb01be2d2cd83cba2a0cbf9b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff75c867_88dec7b8",
        "filename": "src/entity_manager/entity_manager.hpp",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-07-29T13:27:41Z",
      "side": 1,
      "message": "Why `unique_ptr`, is it reset anywhere?\n\nFrom how it\u0027s initialized in the constructor, it can be a regular class member variable, right?",
      "revId": "101ce9121edadaacb01be2d2cd83cba2a0cbf9b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d50d2e8c_c1467ef4",
        "filename": "src/entity_manager/entity_manager.hpp",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1002222
      },
      "writtenOn": "2025-07-30T06:35:29Z",
      "side": 1,
      "message": "Made it a shared_ptr.",
      "parentUuid": "ff75c867_88dec7b8",
      "revId": "101ce9121edadaacb01be2d2cd83cba2a0cbf9b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51780a7f_b757fbeb",
        "filename": "src/entity_manager/entity_manager.hpp",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-07-30T08:52:50Z",
      "side": 1,
      "message": "That\u0027s not what i meant. Usually people prefer `regular member variable`, `unique_ptr`, `shared_ptr`, in that order.\n\nRegular member variable is easiest to reason about since it is valid during the entire lifetime of the object which holds it. `unique_ptr` is less desirable because we may need to check if it\u0027s there (can be `nullptr`).\n\n`shared_ptr` is something of a last resort, when other representations cannot represent the use-case.\n\nSince there is only one instance of `SystemMapper` and it is constructed in `EntityManager` constructor, it can be a regular member variable.\n\nWhich is convenient since we never need to check for `nullptr`.\n\nThere is also some performance issue with `shared_ptr` since it does reference counting.\n\nhttps://en.cppreference.com/w/cpp/memory/shared_ptr.html (Implementation Notes Section)",
      "parentUuid": "d50d2e8c_c1467ef4",
      "revId": "101ce9121edadaacb01be2d2cd83cba2a0cbf9b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c95f127b_7c7f0be6",
        "filename": "src/entity_manager/entity_manager.hpp",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1002222
      },
      "writtenOn": "2025-07-30T12:44:20Z",
      "side": 1,
      "message": "I think I figured it out ðŸ˜„",
      "parentUuid": "51780a7f_b757fbeb",
      "revId": "101ce9121edadaacb01be2d2cd83cba2a0cbf9b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b2c939e_c90c71b8",
        "filename": "src/entity_manager/system_mapper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-07-29T13:27:41Z",
      "side": 1,
      "message": "Since `ObjectMapper` interaction is separate from what `SystemMapper` is doing,\nwhat do you think about first extracting some class to abstract away the `ObjectMapper` usage and use that opportunity to get rid of these inline callbacks.\n\nThen at the next patch introduce `SystemMapper` class.",
      "revId": "101ce9121edadaacb01be2d2cd83cba2a0cbf9b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41be486a_5be4fcda",
        "filename": "src/entity_manager/system_mapper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1002222
      },
      "writtenOn": "2025-07-29T13:59:28Z",
      "side": 1,
      "message": "Creating a seprarate class for ObjectMapper interaction is something I can get behind. Getting rid of the inline lamdas would be a temporary step, until I move the project to sdbusplus::async, hence I dont see much value in that. GetSubTree and getInterface functions will be very short with sdbusplus::async, like less than 20LoCs. \n\nFurther more, i would have to pass the reference to dbusProbeObjects into this class, which I want to avoid.",
      "parentUuid": "9b2c939e_c90c71b8",
      "revId": "101ce9121edadaacb01be2d2cd83cba2a0cbf9b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e2cf30d_54d98aab",
        "filename": "src/entity_manager/system_mapper.cpp",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-07-29T14:08:24Z",
      "side": 1,
      "message": "\u003e Further more, i would have to pass the reference to dbusProbeObjects into this class, which I want to avoid.\n\nWhy? You can just have a `std::bind_front` to bind the arguments to whichever callback you pass into the wrapper for object mapper.\n\n\u003e GetSubTree and getInterface functions will be very short with sdbusplus::async, like less than 20LoCs. \n\nYes, small and well-defined functions. We do not have to create a class but a namespace could work. It reduces the visual noise from having mapper-specific bus names and object path literals inside code that\u0027s only a mapper client.",
      "parentUuid": "41be486a_5be4fcda",
      "revId": "101ce9121edadaacb01be2d2cd83cba2a0cbf9b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4679f16a_3ac85219",
        "filename": "src/entity_manager/system_mapper.hpp",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-07-29T13:27:41Z",
      "side": 1,
      "message": "Why underscore this variable?\nYou did not do that with the other private members vars.",
      "revId": "101ce9121edadaacb01be2d2cd83cba2a0cbf9b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7ff1315_430ebd29",
        "filename": "src/entity_manager/system_mapper.hpp",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1002222
      },
      "writtenOn": "2025-07-30T06:35:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4679f16a_3ac85219",
      "revId": "101ce9121edadaacb01be2d2cd83cba2a0cbf9b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}