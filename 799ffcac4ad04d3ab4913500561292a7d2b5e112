{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "78b379c1_b275bb3b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-02-24T23:02:55Z",
      "side": 1,
      "message": "Also, Michael -- since I\u0027m currently looking into some similar modifications to fru-device (supporting alternate FRU formats, though it looks like you\u0027re a bit farther along on this than I am on mine at the moment), it\u0027d be great if you could post your related follow-on work whenever it\u0027s available (WIP is fine of course) so I can scope it out to hopefully avoid too much conflicting/duplicated work.",
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "abc5adf7_c5aedc6a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-02-26T00:40:27Z",
      "side": 1,
      "message": "And for what it\u0027s worth I\u0027ve now posted a bit of what I\u0027m working on here:\n - https://gerrit.openbmc-project.xyz/c/openbmc/entity-manager/+/51548\n - https://gerrit.openbmc-project.xyz/c/openbmc/entity-manager/+/51580",
      "parentUuid": "78b379c1_b275bb3b",
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18a396a5_f33f036b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-26T22:09:30Z",
      "side": 1,
      "message": "Haven\u0027t reviewed the full patch yet.",
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16a2444a_e34bcecc",
        "filename": "include/spd/spd.hpp",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-02-24T02:06:49Z",
      "side": 1,
      "message": "I don\u0027t think the style of prefixing enums/constants with `k` is used elsewhere in entity-manager (or OpenBMC AFAIK), so it looks a bit incongruous here.",
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b847cb6e_ccc35ac6",
        "filename": "include/spd/spd.hpp",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-03-01T16:23:54Z",
      "side": 1,
      "message": "I was following this(https://google.github.io/styleguide/cppguide.html#Enumerator_Names) to name the enum value.\nBut yea.. We should make it congruous, will change it.",
      "parentUuid": "16a2444a_e34bcecc",
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89f16c37_ea7bdd57",
        "filename": "include/spd/spd.hpp",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-02-24T02:06:49Z",
      "side": 1,
      "message": "I guess the rest of the codebase is a bit inconsistent in this regard already (sometimes it\u0027s `Fru`, sometimes it\u0027s `FRU`), but personally I\u0027d prefer to keep acronyms in identifiers upper-cased, so e.g. `kTypeDDR3` instead of `kTypeDdr3` and such (as is also already the case with the ModuleType and EccType enums below).\n\nAnd likewise `s/Spd/SPD/`, `s/Ecc/ECC/`, etc. elsewhere.",
      "range": {
        "startLine": 16,
        "startChar": 8,
        "endLine": 22,
        "endChar": 25
      },
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "076f8e15_e9c3f786",
        "filename": "include/spd/spd.hpp",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-26T22:09:30Z",
      "side": 1,
      "message": "This \"how do you capitalize shorthand in a camel cased variable\" problem been debated multiple times within the project.  I personally as a maintainer don\u0027t have a strong opinion here.  I find DDR just about as readable as Ddr, and given that we don\u0027t have a good way to lint for that kind of thing, I generally don\u0027t enforce it, but if the author wanted to make the change, I\u0027m fine either way.",
      "parentUuid": "89f16c37_ea7bdd57",
      "range": {
        "startLine": 16,
        "startChar": 8,
        "endLine": 22,
        "endChar": 25
      },
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51bf56e6_f107ebdc",
        "filename": "include/spd/spd.hpp",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-02-24T02:06:49Z",
      "side": 1,
      "message": "`cal` seems like a slightly odd abbreviation for `calculate` to me; I\u0027d find `calc` a lot clearer personally.",
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a7e50ba_eadacc56",
        "filename": "include/spd/spd.hpp",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-03-01T18:13:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "51bf56e6_f107ebdc",
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b71cc0d_c81c2baa",
        "filename": "include/spd/spd.hpp",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-02-24T02:06:49Z",
      "side": 1,
      "message": "Given that these are methods on the SPD class, having the `spd` prefix on them seems a bit redundant.",
      "range": {
        "startLine": 93,
        "startChar": 4,
        "endLine": 96,
        "endChar": 44
      },
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94150176_fbbc0dce",
        "filename": "include/spd/spd.hpp",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-26T22:09:30Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "3b71cc0d_c81c2baa",
      "range": {
        "startLine": 93,
        "startChar": 4,
        "endLine": 96,
        "endChar": 44
      },
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "641ea6b2_96ecd1bb",
        "filename": "include/spd/spd.hpp",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-03-01T16:23:54Z",
      "side": 1,
      "message": "I added the `spd` prefix because there is a similar variable called `dimmSize`. I want to clearly distinguish between these two.\nBut I am OK with removing the `spd` prefix if `totalSize`/`usedSize` is not ambiguous.",
      "parentUuid": "94150176_fbbc0dce",
      "range": {
        "startLine": 93,
        "startChar": 4,
        "endLine": 96,
        "endChar": 44
      },
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b136cb3_78ce6023",
        "filename": "include/spd/spd.hpp",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-02-24T02:06:49Z",
      "side": 1,
      "message": "Maybe create a struct with named `year` and `week` members instead of a generic std::pair?",
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc486007_f1dec187",
        "filename": "include/spd/spd.hpp",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-26T22:09:30Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "7b136cb3_78ce6023",
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7c659b2_a25bb4b4",
        "filename": "include/spd/spd.hpp",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-03-01T18:13:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc486007_f1dec187",
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c6032df_046cc669",
        "filename": "include/spd/spd.hpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-02-24T02:06:49Z",
      "side": 1,
      "message": "Not knowing anything offhand about the JEDEC SPD spec, are there any guarantees about the encoding of these fields?  (e.g. are they defined as ASCII or something?)  If so, we could perhaps use a slightly more specific datatype, though a raw byte array might be the best option if the spec doesn\u0027t dictate anything in particular.",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 109,
        "endChar": 56
      },
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d5ef727_6a4fb7d9",
        "filename": "include/spd/spd.hpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-26T22:09:30Z",
      "side": 1,
      "message": "Lets use std::string here.  vector\u003cuint8_t\u003e is a bit hard to use in most contexts.",
      "parentUuid": "9c6032df_046cc669",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 109,
        "endChar": 56
      },
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb3593da_567a058d",
        "filename": "include/spd/spd.hpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-03-01T16:23:54Z",
      "side": 1,
      "message": "Part number shall be written in ASCII format while the serial number is not.\nActually in our case the serial number is not written in ASCII format.\nSo I think serial number should keep using `vector`.\n\nType of part number changed to `string`.",
      "parentUuid": "6d5ef727_6a4fb7d9",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 109,
        "endChar": 56
      },
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35fafad8_b6911437",
        "filename": "include/spd/spd.hpp",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-02-24T02:06:49Z",
      "side": 1,
      "message": "Perhaps subsequent patches that I haven\u0027t seen yet will make this clear, but what\u0027s the purpose of these methods being (pure) virtual?  I would have thought that there would basically only be one real implementation of JEDEC SPD parsing; are there going to be multiple providers/concrete subclasses for some reason?",
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0915121_8807bf34",
        "filename": "include/spd/spd.hpp",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-26T22:09:30Z",
      "side": 1,
      "message": "+1.  Ideally this should be answered in your commit message.",
      "parentUuid": "35fafad8_b6911437",
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94b50191_2d482341",
        "filename": "include/spd/spd.hpp",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-03-01T16:35:40Z",
      "side": 1,
      "message": "The reason for those virtual functions is to support different generations of DIMM SPD. Because the SPD format has some differences between generations. For example `spdUsedSize` and `spdTotalSize` are the same in DDR5 while it’s two different fields in DDR4.\n\nI also add them to commit message.",
      "parentUuid": "c0915121_8807bf34",
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49912e54_5775c89b",
        "filename": "src/spd.cpp",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-02-24T02:06:49Z",
      "side": 1,
      "message": "I couldn\u0027t tell you the exact parameter configuration off the top of my head, but I suspect this could probably be done via boost::crc instead of having our own open-coded version of it.",
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc6bad2a_3a519eee",
        "filename": "src/spd.cpp",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-26T22:09:30Z",
      "side": 1,
      "message": "+1\n\nSomething like\n\ncrc_optimal\u003c16, 0x1021, 0, 0, true, true\u003e result;\nresult.process_bytes(data.data(), data.sizez());\nreturn result.checksum();\n\n\nmaybe?  That\u0027s a total guess, but I would assume it would look something similar to the above.\n\nhttps://www.boost.org/doc/libs/develop/doc/html/boost/crc_optimal.html",
      "parentUuid": "49912e54_5775c89b",
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce4f6ab0_152b96f9",
        "filename": "src/spd.cpp",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-26T22:10:43Z",
      "side": 1,
      "message": "Actually, this might already be defined for us in boost.  try crc_ccitt_type",
      "parentUuid": "fc6bad2a_3a519eee",
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c9ebce4_1b639b9d",
        "filename": "src/spd.cpp",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-03-01T18:13:19Z",
      "side": 1,
      "message": "Thanks for the information.\nAfter I tested I think `crc_xmodem_t` should be the correct one.\n\n\u003e //! Computation type for the actual XMODEM|ZMODEM|CRC-16/ACORN standard\n\u003e typedef crc_optimal\u003c16, 0x1021, 0, 0, false, false\u003e       crc_xmodem_t;",
      "parentUuid": "ce4f6ab0_152b96f9",
      "revId": "799ffcac4ad04d3ab4913500561292a7d2b5e112",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}