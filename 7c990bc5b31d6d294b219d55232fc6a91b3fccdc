{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3b8d1442_ccadeaad",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 20,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-04-16T20:54:05Z",
      "side": 1,
      "message": "This was explicitly discounted in the original design.  As someone who has maintained things that supported arbitrary includes, maintenance is a nightmare.\n\nFor example, if you have a common #include, and you make an edit to it, are we going to require that all board variants be tested?  How do we stage that?\n\n\nAlso keep in mind that EM files are supposed to be self contained so that they\u0027re not tied to a specific firmware revision (and generally have infinite backward compatibility).\n\nAdding this new feature breaks that property, and makes things like single image systems not possible.",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 20,
        "endChar": 42
      },
      "revId": "7c990bc5b31d6d294b219d55232fc6a91b3fccdc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7e89448_d81aa050",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 20,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-04-17T10:02:41Z",
      "side": 1,
      "message": "\u003e For example, if you have a common #include, and you make an edit to it, are we going to require that all board variants be tested? How do we stage that?\n\nI think it would depend on the property and who owns those configurations.\n\nAnd some people do have hardware CI and are capable to test multiple boards in an automated way.\n\nIn general this feature works in both directions for maximum flexibility üòé\nThe configuration can be de-duplicated but also inlined as needed. If there is the need to change a property but no way to test the other variants, the changed property goes into the ```Override``` property or the whole record is simply inlined and then changed üëç\n\n\u003e Also keep in mind that EM files are supposed to be self contained so that they\u0027re not tied to a specific firmware revision (and generally have infinite backward compatibility).\n\nWould you prefer this to be a compile-time feature? That way there would then only be full configuration files on the BMC. It may even work better with the ```compatible-hardware``` proposal then, since there will be no dangling .record.json files.",
      "parentUuid": "3b8d1442_ccadeaad",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 20,
        "endChar": 42
      },
      "revId": "7c990bc5b31d6d294b219d55232fc6a91b3fccdc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ce052a5_abb6ac3d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-04-16T20:54:05Z",
      "side": 1,
      "message": "Overall I\u0027m not in support of this type of feature, as it defeats some of the purpose of having runtime-read config files in the first place, and complicates the maintenance burden for any common files.  If configs are truly common enough that we can pick defaults, then we shouldn\u0027t have a configuration at all, just add it as a feature in code that can be selected with a single property or type.\n\nFWIW, the predecessor to entity manager implemented this feature, and it needed to be completely undone due to the maintenance issues around minor changes to a single platform or component needing major refactors due to the files being created originally as \"common\".\n\nIf we want to talk through guard rails to prevent the above issues, I\u0027m happy to discuss further.",
      "revId": "7c990bc5b31d6d294b219d55232fc6a91b3fccdc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2df04e22_7a030db6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-04-17T10:02:41Z",
      "side": 1,
      "message": "\u003e complicates the maintenance burden for any common files\n\nYes, but it also allows to easily introduce changes across multiple board variants and keep things in sync. Imagine you have some exposes records which are already part of multiple configs and do not differ much.\n\nHaving a way to deduplicate that can help to avoid the configurations drifting apart.\n\n## realistic use-case for shared configuration records\n\nSome properties which i would like to keep in sync between boards and board variants:\n\n- Thresholds for specific components (the component is the same, just different address and bus and living on a different board)\n\n- Name property (VBAT, CPU_TEMP, ... ) can often be the same. Since it is the same component, just on a different board.\n\n- Type property\n\n## dealing with changes which cannot be validated for all boards\n\n\u003e due to the maintenance issues around minor changes to a single platform or component needing major refactors due to the files being created originally as \"common\".\n\nIf there is a change needed for a configuration which does not apply to all variants or cannot be validated for all of them, it can go in ```Override``` property. If there are too many ```Override``` properties, there is no need to include and the whole record can be inlined.\n\n## proposed guardrails for review of the usage of the feature\n\n- no sharing common configuration records (for baseboards) across OEMs\n- good to share configuration records for slightly different board variants from same OEM\n- if there are too many ```Override``` properties on an included record, the record can be inlined.",
      "parentUuid": "7ce052a5_abb6ac3d",
      "revId": "7c990bc5b31d6d294b219d55232fc6a91b3fccdc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}