{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "24fffa6f_7706ecf5",
        "filename": "format-code",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-28T16:25:41Z",
      "side": 1,
      "message": "Is there a way to avoid the duplication with the build-in scripts?  I\u0027m a little worried about having to modify this call every time we roll clang.\n\nI wonder if this whole script should\u0027ve been a run-ci script instead of a format-code script?  Or is there a way to check for and call the openbmc-build-scripts format-code?",
      "range": {
        "startLine": 12,
        "startChar": 12,
        "endLine": 12,
        "endChar": 15
      },
      "revId": "a8413e29a9008342820b0231c75aa2e935d7c693",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "563381cd_119edfe6",
        "filename": "format-code",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1001252
      },
      "writtenOn": "2022-03-28T17:03:17Z",
      "side": 1,
      "message": "In openbmc-build-scripts, it already called clang-format before this script. Maybe the format here is not needed?\n\nhttps://github.com/openbmc/openbmc-build-scripts/blob/ac5915f07d3b796f224c85477763ca7fe893dcc2/scripts/format-code.sh#L130",
      "parentUuid": "24fffa6f_7706ecf5",
      "range": {
        "startLine": 12,
        "startChar": 12,
        "endLine": 12,
        "endChar": 15
      },
      "revId": "a8413e29a9008342820b0231c75aa2e935d7c693",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cf726f1_369e4e2e",
        "filename": "format-code",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-03-28T23:46:39Z",
      "side": 1,
      "message": "Okay, so I was going off my memory of some of the behaviour of openbmc-build-scripts here, given that I added the support for the in-repo format-code script initially.\n\nSo my memory was the formatting in openbmc-build-scripts was mutually exclusive with the presence of format-code in the target repo (i.e. if format-code existed in the target repo, it was run instead of the default formatting provided by openbmc-build-scripts). That mutual exclusion is implemented here:\n\nhttps://github.com/openbmc/openbmc-build-scripts/blob/0ea75ec9efb7ffacb88f63e38fa7823fe8b124a7/scripts/unit-test.py#L1215-L1226\n\nThis would explain why there were some formatting issues in the codebase.\n\nThe additional call to format-code at [1] doesn\u0027t seem sensible any more, I don\u0027t know why it\u0027s there.\n\n[1] https://github.com/openbmc/openbmc-build-scripts/blob/ac5915f07d3b796f224c85477763ca7fe893dcc2/scripts/format-code.sh#L136-L141",
      "parentUuid": "563381cd_119edfe6",
      "range": {
        "startLine": 12,
        "startChar": 12,
        "endLine": 12,
        "endChar": 15
      },
      "revId": "a8413e29a9008342820b0231c75aa2e935d7c693",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b73549d_e4865618",
        "filename": "format-code",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-28T23:51:57Z",
      "side": 1,
      "message": "not to further add complexity, but I wonder if we need a convention for an \"extra-format-code\" name that will still run the existing formatter if it\u0027s present, and just treats the new script as additional.\n\nWith that said, are there any use cases where we don\u0027t want the stock formatters to run?",
      "parentUuid": "6cf726f1_369e4e2e",
      "range": {
        "startLine": 12,
        "startChar": 12,
        "endLine": 12,
        "endChar": 15
      },
      "revId": "a8413e29a9008342820b0231c75aa2e935d7c693",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2edf2790_3f0fccec",
        "filename": "format-code",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-03-28T23:55:46Z",
      "side": 1,
      "message": "Some discord discussion: https://discord.com/channels/775381525260664832/867820390406422538/958151535462862848",
      "parentUuid": "6cf726f1_369e4e2e",
      "range": {
        "startLine": 12,
        "startChar": 12,
        "endLine": 12,
        "endChar": 15
      },
      "revId": "a8413e29a9008342820b0231c75aa2e935d7c693",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dfc980c_702656f5",
        "filename": "format-code",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-03-28T23:59:52Z",
      "side": 1,
      "message": "well, originally it was the use case from phosphor-mboxd where we had a mixed C and C++ codebase where the C followed kernel-style and the C++ followed the OpenBMC style. clang-format doesn\u0027t differentiate between formatting controls for C and C++, so we needed separate config files, and it was just easier to hijack the whole process rather than try to rely on openbmc-build-scripts providing some default behaviour (as clang-format\u0027s -style\u003dfile at the time didn\u0027t support any name for the formatting configuration file beyond .clang-format, which I still find incredible, and so we needed to symlink two different configurations into place and invoke clang-format twice).\n\nThat said we should probably have a discussion either in discord and/or the mailing list about how to resolve this more broadly.",
      "parentUuid": "2edf2790_3f0fccec",
      "range": {
        "startLine": 12,
        "startChar": 12,
        "endLine": 12,
        "endChar": 15
      },
      "revId": "a8413e29a9008342820b0231c75aa2e935d7c693",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc70041f_60c7f38c",
        "filename": "format-code",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-29T00:00:55Z",
      "side": 1,
      "message": "Thanks for the background;  Agreed.",
      "parentUuid": "2dfc980c_702656f5",
      "range": {
        "startLine": 12,
        "startChar": 12,
        "endLine": 12,
        "endChar": 15
      },
      "revId": "a8413e29a9008342820b0231c75aa2e935d7c693",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa22c976_58468ace",
        "filename": "format-code",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-03-29T02:16:21Z",
      "side": 1,
      "message": "https://lore.kernel.org/openbmc/4bc2b30d-b335-4457-9601-9c7226d6c656@www.fastmail.com/\n\nEasiest thing to do for now is to just drop the patch while continuing to run clang-format locally so things remain in shape.",
      "parentUuid": "bc70041f_60c7f38c",
      "range": {
        "startLine": 12,
        "startChar": 12,
        "endLine": 12,
        "endChar": 15
      },
      "revId": "a8413e29a9008342820b0231c75aa2e935d7c693",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}