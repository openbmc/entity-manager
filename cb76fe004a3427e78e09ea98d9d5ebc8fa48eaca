{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c15079fc_fbe37645",
        "filename": "include/FruUtils.hpp",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1000265
      },
      "writtenOn": "2022-02-28T14:00:10Z",
      "side": 1,
      "message": "With the current implementation, this method has two different semantics depending on whether noCache is set. As I understand, if noCache\u003d\u003dtrue the \"read\" method tries to get all the requested data, even if it requires multiple calls to readFunc. With noCache\u003d\u003dfalse, the \"read\" method will return whatever readFunc returns, even if it\u0027s fewer bytes than was requested.\n\nI can\u0027t think of an easy way to fix this - do you?\n\nIf nothing else, maybe just add a comment to this method / the class to make clear what the semantics of \"read\" are.",
      "range": {
        "startLine": 92,
        "startChar": 2,
        "endLine": 92,
        "endChar": 61
      },
      "revId": "cb76fe004a3427e78e09ea98d9d5ebc8fa48eaca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e7bd2a1_10282057",
        "filename": "include/FruUtils.hpp",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1000265
      },
      "writtenOn": "2022-02-28T14:03:55Z",
      "side": 1,
      "message": "One idea: Maybe split the FruReader class into a base class that performs no caching and does not \"guarantee\" to read all requested bytes. And a child class \"CachedFruReader\" that does perform caching and does try to read all the bytes. With that, you could require the \"CachedFruReader\" to be used in the call to readIPMIFRUContents?",
      "parentUuid": "c15079fc_fbe37645",
      "range": {
        "startLine": 92,
        "startChar": 2,
        "endLine": 92,
        "endChar": 61
      },
      "revId": "cb76fe004a3427e78e09ea98d9d5ebc8fa48eaca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}