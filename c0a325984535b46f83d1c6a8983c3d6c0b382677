{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d4260cd3_60fdbfd9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 16
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "a single sentence is rarely enough detail, and certainly not enough for adding a major feature like this.  Please go a little deeper into \"why\" this change is useful in your commit message please.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 46
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72a5a4ef_3e8bfeb1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-03-17T09:15:40Z",
      "side": 1,
      "message": "Thanks for all the comments.\nAs you said, it\u0027s difficult to verify this patchset unless the entire series are avaliable.\nSo I will push the rest of patchset first then come back to solve the defect here.\nI think this series can be completed within 2 more patches.",
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e56b7ce2_07dd5279",
        "filename": "include/spd/ddr5.hpp",
        "patchSetId": 16
      },
      "lineNbr": 70,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "The endianness needs to be represented in the class, not just in a comment.",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 70,
        "endChar": 44
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25422ee5_2eb78b04",
        "filename": "include/spd/ddr5.hpp",
        "patchSetId": 16
      },
      "lineNbr": 70,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "Done, change to `boost::endian::little_xxxxx` as you suggested.",
      "parentUuid": "e56b7ce2_07dd5279",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 70,
        "endChar": 44
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "137a461e_3e2d42b1",
        "filename": "include/spd/ddr5.hpp",
        "patchSetId": 16
      },
      "lineNbr": 233,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "Why not uint16_t?",
      "range": {
        "startLine": 233,
        "startChar": 8,
        "endLine": 233,
        "endChar": 15
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5175269d_60ef92ce",
        "filename": "include/spd/ddr5.hpp",
        "patchSetId": 16
      },
      "lineNbr": 233,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "137a461e_3e2d42b1",
      "range": {
        "startLine": 233,
        "startChar": 8,
        "endLine": 233,
        "endChar": 15
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40f4faca_765daf7b",
        "filename": "include/spd/ddr5.hpp",
        "patchSetId": 16
      },
      "lineNbr": 236,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "Similar to how we pull the PCIe manufacturer ID tables, is this going to pull the JEDEC manufacturer tables?",
      "range": {
        "startLine": 236,
        "startChar": 0,
        "endLine": 236,
        "endChar": 38
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8c88385_95bcf70b",
        "filename": "include/spd/ddr5.hpp",
        "patchSetId": 16
      },
      "lineNbr": 236,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "Done. https://gerrit.openbmc.org/c/openbmc/entity-manager/+/51435/13/include/manufacturer_id_table.hpp",
      "parentUuid": "40f4faca_765daf7b",
      "range": {
        "startLine": 236,
        "startChar": 0,
        "endLine": 236,
        "endChar": 38
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7784e6c8_e16eb1b6",
        "filename": "include/spd/ddr5.hpp",
        "patchSetId": 16
      },
      "lineNbr": 262,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "Relying on packed encodings is error prone and in general is no prefered in openbmc, because it generally relies on explicit handling of endian values (through something like boost::endian::little_int32_buf_t for example)\n\nConsidering that a lot of these fields aren\u0027t in a representation we\u0027d want in the bmc anyway (partNumber should ideally be std::string, or std::string_view) I suspect we want to break this class up into a method that parses into a structure that the BMC can operate on.",
      "range": {
        "startLine": 262,
        "startChar": 5,
        "endLine": 262,
        "endChar": 30
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1edf59a1_eb0064f6",
        "filename": "include/spd/ddr5.hpp",
        "patchSetId": 16
      },
      "lineNbr": 262,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "I removed the `__attribute__((packed))` and changed all the none 1-byte variable into boost::endian::little_xxxxxxx",
      "parentUuid": "7784e6c8_e16eb1b6",
      "range": {
        "startLine": 262,
        "startChar": 5,
        "endLine": 262,
        "endChar": 30
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94bc2f2e_0f2d04e2",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "These things should be under if(debug) flags, otherwise they will print for a large number of frus that look like jedec, but aren\u0027t.",
      "range": {
        "startLine": 13,
        "startChar": 8,
        "endLine": 14,
        "endChar": 76
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5fcf256b_1d1f6f76",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 14,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "94bc2f2e_0f2d04e2",
      "range": {
        "startLine": 13,
        "startChar": 8,
        "endLine": 14,
        "endChar": 76
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d82b2a52_e0074b27",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 20,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "Please use the appropiate types for these things such that static casts aren\u0027t required.",
      "range": {
        "startLine": 20,
        "startChar": 23,
        "endLine": 20,
        "endChar": 44
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72f1bac2_cbf4de05",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 20,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "nit, check against \u003c 0 please in case this function decides to return other negative values in the future.",
      "range": {
        "startLine": 20,
        "startChar": 14,
        "endLine": 20,
        "endChar": 19
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ec7fdf3_9b35d4da",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 20,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "I change it to optional.",
      "parentUuid": "72f1bac2_cbf4de05",
      "range": {
        "startLine": 20,
        "startChar": 14,
        "endLine": 20,
        "endChar": 19
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4fe1d0c3_c20fd8c9",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 20,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "Changed to std::optional.",
      "parentUuid": "d82b2a52_e0074b27",
      "range": {
        "startLine": 20,
        "startChar": 23,
        "endLine": 20,
        "endChar": 44
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e84380d_acfae173",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 25,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "per our coding standard, new and delete shouldn\u0027t be used anymore.  make_unique should be prefered in these cases.",
      "range": {
        "startLine": 25,
        "startChar": 36,
        "endLine": 25,
        "endChar": 39
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a173c9b_344c618d",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 25,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "You\u0027re passing a non-owning span to a class that\u0027s being returned in a unique_ptr.  This pattern can VERY easily lead to lifetime issues.  I suspect that the interfaces need to be reworked to convey ownership of the buffer (probably handing ownership to the DDR5SPD class)",
      "range": {
        "startLine": 25,
        "startChar": 48,
        "endLine": 25,
        "endChar": 56
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13587b2a_a0226fda",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 25,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "In the constructor `explicit DDR5SPD(std::span\u003cconst uint8_t\u003e spdBytes);`, I deep copied the input `std::span\u003cconst uint8_t\u003e spdBytes` into a member vector `spdBytes_`.\nSo I think the class DDR5SPD owns the SPD data by itself. Should not have life cycle issue.\n```\nDDR5SPD::DDR5SPD(std::span\u003cconst uint8_t\u003e spdBytes) :\n    spdBytes_(spdBytes.begin(), spdBytes.end())    \u003c--- deep copy here\n{\n    spd_ \u003d reinterpret_cast\u003cDDR5Fields*\u003e(spdBytes_.data());\n}\n```",
      "parentUuid": "4a173c9b_344c618d",
      "range": {
        "startLine": 25,
        "startChar": 48,
        "endLine": 25,
        "endChar": 56
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cafe0d29_1e0741e6",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 25,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "\"return std::make_unique\u003cDDR5SPD\u003e(spdBytes);\" won\u0027t work because the constructor is private. And the `make_unique` cannot access private constructor.\nI found 2 alternatives to solve this.\n- Passing a `new` instance to unique_ptr constructor. \n- Make the constructor public while add a private struct variable as input argument. So user can\u0027t use this constructor because they can\u0027t access private struct. https://seanmiddleditch.github.io/enabling-make-unique-with-private-constructors/\n\nI chose the former one because it\u0027s more cleaner.\n\n-------------------------------------------------\n\n\u003e per our coding standard, new and delete shouldn\u0027t be used anymore.\n\nI think the reason that `new` is forbidden because it may cause memory issue if we forget to delete it.\nHowever directly passes the `new` instance into unique_ptr won\u0027t have this kind of issue.\n\n```\nvoid foo(int* input_ptr) {\n    auto uptr \u003d std::unique_ptr\u003cint\u003e{input_ptr};\n    cout \u003c\u003c \"uptr \u003d \" \u003c\u003c (uint64_t) uptr.get() \u003c\u003c \", *uptr \u003d \" \u003c\u003c *uptr \u003c\u003c endl;\n}\nint main() {\n    int* ptr \u003d new int(10);\n    cout \u003c\u003c \"ptr  \u003d \" \u003c\u003c (uint64_t) ptr \u003c\u003c \", *ptr  \u003d \" \u003c\u003c *ptr \u003c\u003c endl;\n    foo(ptr);\n    cout \u003c\u003c \"ptr  \u003d \" \u003c\u003c (uint64_t) ptr \u003c\u003c \", *ptr  \u003d \" \u003c\u003c *ptr \u003c\u003c endl;\n    delete ptr;\n    return 0;\n}\n```\n```\nptr  \u003d 93887148723920, *ptr  \u003d 10\nuptr \u003d 93887148723920, *uptr \u003d 10\nptr  \u003d 93887148723920, *ptr  \u003d 1446830688 \u003c-- when life cycle of unique_ptr is end, it will release the memory.\nfree(): double free detected in tcache 2 \u003c-- we don\u0027t/can\u0027t delete that memory again because it has been deleted.\n[1]    2819442 IOT instruction  ./src/gptest\n```",
      "parentUuid": "9e84380d_acfae173",
      "range": {
        "startLine": 25,
        "startChar": 36,
        "endLine": 25,
        "endChar": 39
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6584a32_45161b32",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 30,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "please use array for values known at compile time.\n\nAlso, please cite the source for these values.",
      "range": {
        "startLine": 30,
        "startChar": 15,
        "endLine": 30,
        "endChar": 21
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1850104c_0259d0b1",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 30,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a6584a32_45161b32",
      "range": {
        "startLine": 30,
        "startChar": 15,
        "endLine": 30,
        "endChar": 21
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "babb9181_345bdd7d",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 47,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "Please use a real class for this.",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 25
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a92a4bf6_7f110dea",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 47,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "babb9181_345bdd7d",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 25
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e752979_423b7f11",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 49,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "magic number?  This is somewhat pointing to what I pointed out earlier about using pragma(packed) to decode buffers being error prone.  Almost all places where this code calls into spd_-\u003e aren\u0027t range checked, and given that the buffer interfaces only enfoce a minimum size of 3, means that it would be pretty easy to write a buffer that would make this code seg fault.",
      "range": {
        "startLine": 49,
        "startChar": 24,
        "endLine": 49,
        "endChar": 28
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c34049a6_d7abbd1b",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 49,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "Fixed. Now the constructor will do all the size check instead of check in the each method.",
      "parentUuid": "9e752979_423b7f11",
      "range": {
        "startLine": 49,
        "startChar": 24,
        "endLine": 49,
        "endChar": 28
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73958849_dd6bfd8c",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 51,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "Considering that a part could have negative values in this, do we want a better return type here?",
      "range": {
        "startLine": 51,
        "startChar": 8,
        "endLine": 51,
        "endChar": 57
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e76b8933_4a937c9c",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 51,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "It returns string now. I put the MFRIDJEP106 in the code.\nhttps://gerrit.openbmc.org/c/openbmc/entity-manager/+/51435/13/include/manufacturer_id_table.hpp",
      "parentUuid": "73958849_dd6bfd8c",
      "range": {
        "startLine": 51,
        "startChar": 8,
        "endLine": 51,
        "endChar": 57
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b37435d6_cb0a91c5",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 75,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "Considering we have enums for other things, do we need an enum class for these?  (could be declared in this class if you wanted).",
      "range": {
        "startLine": 75,
        "startChar": 13,
        "endLine": 75,
        "endChar": 17
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3eec4bff_7057f0c2",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 75,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "In the latest revision I make this function private since it\u0027s only used for calculate dimm size.\nHence I don\u0027t think we need a enum class for this.",
      "parentUuid": "b37435d6_cb0a91c5",
      "range": {
        "startLine": 75,
        "startChar": 13,
        "endLine": 75,
        "endChar": 17
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0222ea36_4144c16d",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 249,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "Why are we masking these here?  This seems like we should be checking against negative values?",
      "range": {
        "startLine": 249,
        "startChar": 70,
        "endLine": 249,
        "endChar": 76
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e75a5bb2_3139ed1d",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 249,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "Obsoleted. Now we directly return manufacturer\u0027s name.",
      "parentUuid": "0222ea36_4144c16d",
      "range": {
        "startLine": 249,
        "startChar": 70,
        "endLine": 249,
        "endChar": 76
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b68afeb4_50f2c4ce",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 282,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "I mentioned on an earlier patch, but these should be:\n\nReturning a time_point\nneed range checks to ensure that the values are sane (ie, not negative or overflowing).",
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f2a923c_e25b58ad",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 282,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "Change the type to `std::chrono::time_point\u003cstd::chrono::system_clock\u003e`\n\n\u003e need range checks to ensure that the values are sane (ie, not negative or overflowing).\n\nnegative number is not possible. I can only check if week is overflowing (\u003e53)",
      "parentUuid": "b68afeb4_50f2c4ce",
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6d57574_428ca020",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 290,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "prefer to use std::string here, considering that surely this has some rule about length that we should be enforcing here.  If these are truly fixed length, then we should be returning by std::array.",
      "range": {
        "startLine": 290,
        "startChar": 0,
        "endLine": 290,
        "endChar": 21
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c95c534e_5f8c3456",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 290,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a6d57574_428ca020",
      "range": {
        "startLine": 290,
        "startChar": 0,
        "endLine": 290,
        "endChar": 21
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1242b37c_eea7b209",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 312,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "This has the potential to put null terminators (zeros) in the result, which is definitely now what you intended.\n\nie, an empty part number should return \"\", not \"\\x00\\x00\\x00...\"\n\nI dont know what the jedec spec requires for termination characters, but it should be handled here.",
      "range": {
        "startLine": 311,
        "startChar": 0,
        "endLine": 312,
        "endChar": 68
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a3f6e54_fed685e7",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 312,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "Cite from `JC-45-2260.01`\n```\nBytes 521~550 (0x209~0x226): Module Part Number\nThe manufacturer’s part number shall be included and is written in ASCII format within these\nbytes. Unused digits are coded as ASCII blanks (0x20).\n```\n\n\u003e This has the potential to put null terminators (zeros) in the result, which is definitely now what you intended.\n\nFrom the spec it doesn\u0027t/can\u0027t contain null (0x00)\n\n\u003e ie, an empty part number should return \"\", not \"\\x00\\x00\\x00...\"\n\nIn this case the content should be \"0x20, 0x20, 0x20....\"\n\n----------------------------------------------------------------\n\nI remembered you mentioned that we should make those functions easy to use.\nSo in the latest revision I check the content of partNumber and trim all the illegal character (non-printable and space) out.\nhttps://gerrit.openbmc.org/c/openbmc/entity-manager/+/51435/13/src/spd.cpp#393",
      "parentUuid": "1242b37c_eea7b209",
      "range": {
        "startLine": 311,
        "startChar": 0,
        "endLine": 312,
        "endChar": 68
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c439c80c_fc4d203c",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 351,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "the left shift logic looks duplicated between the branches, as is a bunch of the math (kprimaryBusWidthPerChannel/kWidth for example) can it be deduplicated?",
      "range": {
        "startLine": 350,
        "startChar": 0,
        "endLine": 351,
        "endChar": 55
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c5dfa9e_7924e0c3",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 351,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "Fixed.",
      "parentUuid": "c439c80c_fc4d203c",
      "range": {
        "startLine": 350,
        "startChar": 0,
        "endLine": 351,
        "endChar": 55
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0647d673_bafddcda",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 352,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "Don\u0027t duplicate this static cast, make another variable. for it.",
      "range": {
        "startLine": 352,
        "startChar": 16,
        "endLine": 352,
        "endChar": 35
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5a948ec_a9368300",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 352,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0647d673_bafddcda",
      "range": {
        "startLine": 352,
        "startChar": 16,
        "endLine": 352,
        "endChar": 35
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc89a02e_b8e39515",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 369,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-12T18:14:07Z",
      "side": 1,
      "message": "This API should be returning an enum that\u0027s more useful.  You\u0027ve documented the things in a comment below, it just needs to be turned into an enum class.",
      "range": {
        "startLine": 369,
        "startChar": 0,
        "endLine": 369,
        "endChar": 6
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8a43241_e856d1d1",
        "filename": "src/ddr5.cpp",
        "patchSetId": 16
      },
      "lineNbr": 369,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-07-06T08:03:35Z",
      "side": 1,
      "message": "Done. Now it return Dimm::Ecc that defined in \u003cxyz/openbmc_project/Inventory/Item/Dimm/server.hpp\u003e",
      "parentUuid": "dc89a02e_b8e39515",
      "range": {
        "startLine": 369,
        "startChar": 0,
        "endLine": 369,
        "endChar": 6
      },
      "revId": "c0a325984535b46f83d1c6a8983c3d6c0b382677",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}