{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3196c14c_29ffdf1a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-17T19:36:37Z",
      "side": 1,
      "message": "This is a version of the daemon that builds and works on a live system, but does not pass CI testing.\n\nAs of the writing, the CI tool appears to be making suggestions that stop it from building. A revision with the suggestions accepted is here:\n\n75353: entity-manager: dt-vpd daemon broken by ci tool changes | https://gerrit.openbmc.org/c/openbmc/entity-manager/+/75353\n\nI plan to ask around on the OBMC discord in the near future for help figuring out what needs to be done (but am about to be headed out to a doc apt today)",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2e32e0c_5b537b82",
        "filename": "meson.build",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-18T18:26:26Z",
      "side": 1,
      "message": "whitespace issues.",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cdd2858_c21d8ca9",
        "filename": "meson.build",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-24T20:23:37Z",
      "side": 1,
      "message": "Since it seems like the CI tool scripts don\u0027t catch this kind of thing automatically - any recommended tools for checking this stuff automatically before I push to Gerrit?",
      "parentUuid": "b2e32e0c_5b537b82",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25d8ee71_202c93ae",
        "filename": "meson.build",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-10-31T15:08:50Z",
      "side": 1,
      "message": "I think most people just have it built into their editors. I use a vim plugin.",
      "parentUuid": "6cdd2858_c21d8ca9",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08fa1554_74137272",
        "filename": "src/dt-vpd-parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-10-21T19:51:07Z",
      "side": 1,
      "message": "source files names should be snake_case.",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2489cf6b_08839935",
        "filename": "src/dt-vpd-parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-24T20:23:37Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "08fa1554_74137272",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b99f0dc6_43487752",
        "filename": "src/machinecontext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-18T18:26:26Z",
      "side": 1,
      "message": "This is a copy.  I suspect this will go away shortly though.",
      "range": {
        "startLine": 27,
        "startChar": 26,
        "endLine": 27,
        "endChar": 30
      },
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c514471a_3e893102",
        "filename": "src/machinecontext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-18T18:26:26Z",
      "side": 1,
      "message": "Wildcard captures are generally disallowed, as they are hard to review.",
      "range": {
        "startLine": 27,
        "startChar": 23,
        "endLine": 27,
        "endChar": 25
      },
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ec1ef00_20506cac",
        "filename": "src/machinecontext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-24T20:23:37Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "b99f0dc6_43487752",
      "range": {
        "startLine": 27,
        "startChar": 26,
        "endLine": 27,
        "endChar": 30
      },
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b03081f_a0d584cc",
        "filename": "src/machinecontext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-24T20:23:37Z",
      "side": 1,
      "message": "Is capturing \u0027this\u0027 for access to members of the MachineContext object instance acceptable, or would something else be preferred?\n\nI tried capturing \"MachineContext::Asset:model\" (overloaded setter for the inherited property I\u0027m trying to update), but I get errors along the lines of\n\nerror: capture of non-variable \u0027sdbusplus::aserver::xyz::openbmc_project::inventory::decorator::details::Asset\u003cMachineContext, sdbusplus::async::server::server\u003cMachineContext, sdbusplus::aserver::xyz::openbmc_project::inventory::decorator::details::Asset\u003e \u003e::model\u0027\n|    25 |     std::thread readInThread([\u0026model] {\n\n\nand I haven\u0027t worked out what other options are available for capturing those references yet.",
      "parentUuid": "c514471a_3e893102",
      "range": {
        "startLine": 27,
        "startChar": 23,
        "endLine": 27,
        "endChar": 25
      },
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "feb55dce_c31c1854",
        "filename": "src/machinecontext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-10-24T21:08:16Z",
      "side": 1,
      "message": "yea, [this] is fine",
      "parentUuid": "1b03081f_a0d584cc",
      "range": {
        "startLine": 27,
        "startChar": 23,
        "endLine": 27,
        "endChar": 25
      },
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2ce1a10_3e890095",
        "filename": "src/machinecontext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-28T17:31:30Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "feb55dce_c31c1854",
      "range": {
        "startLine": 27,
        "startChar": 23,
        "endLine": 27,
        "endChar": 25
      },
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64a31fe4_6872da70",
        "filename": "src/machinecontext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-10-18T05:42:28Z",
      "side": 1,
      "message": "It looks like you\u0027re having some difficulty with this, and I feel like this approach might be over-complicating it.\n\nThe devicetree isn\u0027t something that changes on a whim; properties of a node are described in machine-checked bindings because they form an ABI between the firmware and the kernel.\n\nI don\u0027t see a reason we can\u0027t hard-code the setting of these members rather than have the complexity of the property map with lambdas. The only thing that\u0027s necessary is testing if the file exists.",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3d09510_649e57f3",
        "filename": "src/machinecontext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-18T14:22:17Z",
      "side": 1,
      "message": "Fair enough. The structure seemed like a really cool idea suggested in a previous review that left things open for easy expansion in the future.\n(https://gerrit.openbmc.org/c/openbmc/phosphor-u-boot-env-mgr/+/71512/comment/34ca01d8_5acf8f3d/)\n\nThe weird thing is that the code itself works-- but when the CI tool runs, it wants to change any function containing this map def into a \u0027static\u0027 (replacing \u0027const\u0027 if set) -- which breaks the closure getting a reference to an instanced object.\n\nI\u0027m about to jump on Discord and ask around to see if I can get a handle on why the CI tool is so insistent about following this structure with a \u0027static\u0027 label. \nCurrently I\u0027m suspecting it\u0027s something to do with the tool thinking \"map being defined on-the-spot? clearly that could be static.\"\n\nEither way, I\u0027ll put \"just get rid of the structure and hardcode\" on the shortlist of serious considerations.",
      "parentUuid": "64a31fe4_6872da70",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e410452a_e69cfafd",
        "filename": "src/machinecontext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-18T15:22:03Z",
      "side": 1,
      "message": "Discord discussion about the CI tool suggestions breaking things posted @\nhttps://discord.com/channels/775381525260664832/817151035197358081/1296853865911812097",
      "parentUuid": "f3d09510_649e57f3",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f2c1263_27b74d49",
        "filename": "src/machinecontext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-18T18:26:26Z",
      "side": 1,
      "message": "\u003e I feel like this approach might be over-complicating it.\n\n+1\n\nI think in discord I posted this, but duplicating in gerrit for visibility\n```\nif (name \u003d\u003d \"serial-number\"){\n    MachineContext::Asset::serial_number(....);\n}\n```\n\nIn addition, I would say as an overall goal, lets keep _this patch_ simple.  If in future patches we find that we need targetable per handler dynamic callbacks we can do implement that when we can justify the complexity.  For now, just a fixed list of keys and direct call methods will work just fine.",
      "parentUuid": "e410452a_e69cfafd",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7ae855c_f4a8dfbf",
        "filename": "src/machinecontext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-24T20:23:37Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "7f2c1263_27b74d49",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61f82e7a_65794f98",
        "filename": "src/machinecontext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-18T18:26:26Z",
      "side": 1,
      "message": "You\u0027re constructing a map here, then you\u0027re using it like a list.",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "128443bf_42aaef52",
        "filename": "src/machinecontext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-24T20:23:37Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "61f82e7a_65794f98",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcde11bc_365a072c",
        "filename": "src/machinecontext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-18T18:26:26Z",
      "side": 1,
      "message": "This is doing a blocking IO call in the async reactor, which will deadlock all other calls if this node takes a long time to reply.  In asio we have uring based file readers, or should we do this in its own thread so we don\u0027t block dbus?",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5525784e_ebff03e3",
        "filename": "src/machinecontext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-24T20:23:37Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "dcde11bc_365a072c",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5e4c6b8_66147b3c",
        "filename": "src/machinecontext.hpp",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-10-21T19:51:07Z",
      "side": 1,
      "message": "snake_case filenames here too.",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fdcc3e3d_8e0ff8fb",
        "filename": "src/machinecontext.hpp",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-24T20:23:37Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "e5e4c6b8_66147b3c",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56cb9b23_be561d4a",
        "filename": "src/machinecontext.hpp",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-18T18:26:26Z",
      "side": 1,
      "message": "This is only used in one place, and realistically has nothing to do with this class.  Just inline this.",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9882767d_6c24eef2",
        "filename": "src/machinecontext.hpp",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-24T20:23:37Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "56cb9b23_be561d4a",
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41b19e17_e3509bf2",
        "filename": "src/machinecontext.hpp",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-18T18:26:26Z",
      "side": 1,
      "message": "This is only ever called in the constructor.  Maybe just make this the constructor?",
      "range": {
        "startLine": 43,
        "startChar": 9,
        "endLine": 43,
        "endChar": 31
      },
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13fc53ae_0bf1c36d",
        "filename": "src/machinecontext.hpp",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-24T20:23:37Z",
      "side": 1,
      "message": "I ran into linker issues when I call out the MachineContext constructor in machine_context.hpp, then define the implimentation in the cpp (attempting to avoid implementation code in the header file). \n\nI *think* I can work around that with some meson.build changes, but I haven\u0027t gotten that working in experiments yet.\n\nDefining a MC constructor in the header that calls a member function with the implementation details works around the linker issue without meson changes.\n\nThoughts?",
      "parentUuid": "41b19e17_e3509bf2",
      "range": {
        "startLine": 43,
        "startChar": 9,
        "endLine": 43,
        "endChar": 31
      },
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34b527c5_36e9269a",
        "filename": "src/machinecontext.hpp",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-10-28T17:31:30Z",
      "side": 1,
      "message": "Looks like we\u0027re now discussing having the populate function called explicitly, instead of in the constructor.\n\nhttps://gerrit.openbmc.org/c/openbmc/entity-manager/+/75349/comment/0ad4625c_5eab1232/",
      "parentUuid": "13fc53ae_0bf1c36d",
      "range": {
        "startLine": 43,
        "startChar": 9,
        "endLine": 43,
        "endChar": 31
      },
      "revId": "de8b4fa7473d0c6a41db77a6e100a71f50561193",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}