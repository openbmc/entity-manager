{
  "comments": [
    {
      "key": {
        "uuid": "433a371c_22158ccd",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T22:27:53Z",
      "side": 1,
      "message": "Please don\u0027t extern this.  Include the appropriate header or pass it through the layers.",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 37,
        "endChar": 34
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c44b2eea_b16739e9",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2021-02-25T21:40:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "433a371c_22158ccd",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 37,
        "endChar": 34
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0b9fe87_5f6d93d9",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T22:27:53Z",
      "side": 1,
      "message": "Please invert this check to save horizontal space.",
      "range": {
        "startLine": 165,
        "startChar": 0,
        "endLine": 166,
        "endChar": 5
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b873cb4_d0cba390",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2021-02-25T21:40:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a0b9fe87_5f6d93d9",
      "range": {
        "startLine": 165,
        "startChar": 0,
        "endLine": 166,
        "endChar": 5
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aeecd83a_04eb6b48",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T22:27:53Z",
      "side": 1,
      "message": "This isn\u0027t neccesary to check.  Just use the constructor of directory_iterator that takes and returns an error code.",
      "range": {
        "startLine": 172,
        "startChar": 29,
        "endLine": 172,
        "endChar": 41
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e490f82_cdddb21e",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2021-02-25T21:40:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aeecd83a_04eb6b48",
      "range": {
        "startLine": 172,
        "startChar": 29,
        "endLine": 172,
        "endChar": 41
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41a11a8e_b993d82d",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 175,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T22:27:53Z",
      "side": 1,
      "message": "Would recursive_directory_iterator make more sense here?  A lot of the things in these directories are symlinks, and recursive_directory_iterator can be set to follow them automatically rather than having two levels of loops.",
      "range": {
        "startLine": 175,
        "startChar": 34,
        "endLine": 175,
        "endChar": 52
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7de24551_98002f77",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 175,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2021-02-25T21:40:11Z",
      "side": 1,
      "message": "We really don\u0027t need to recurse the entire tree.",
      "parentUuid": "41a11a8e_b993d82d",
      "range": {
        "startLine": 175,
        "startChar": 34,
        "endLine": 175,
        "endChar": 52
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b89221c_61dbcdf2",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 175,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-11T15:06:34Z",
      "side": 1,
      "message": "Right, but you can stop the recursion at anytime with disable_recursion_pending.\n\nhttps://en.cppreference.com/w/cpp/filesystem/recursive_directory_iterator/disable_recursion_pending\n\nI know james has been burned on that \"some things are a symlink in hwmon, some aren\u0027t, and it isn\u0027t consistent\" thing several times.  I\u0027d really like to avoid it in this case if we can.\n\nWith that said, if you really don\u0027t want to do it, I\u0027m not super worried about it.",
      "parentUuid": "7de24551_98002f77",
      "range": {
        "startLine": 175,
        "startChar": 34,
        "endLine": 175,
        "endChar": 52
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2846a54c_a3898226",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 182,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T22:27:53Z",
      "side": 1,
      "message": "undefined behavior.  You\u0027re capturing an rvalue by reference here.  filename() returns a value type, so you can\u0027t load it into a reference type and expect it to still be around after the intermediate has been destroyed.",
      "range": {
        "startLine": 182,
        "startChar": 15,
        "endLine": 182,
        "endChar": 34
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32e1ece7_28c85773",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 182,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2021-02-25T21:40:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2846a54c_a3898226",
      "range": {
        "startLine": 182,
        "startChar": 15,
        "endLine": 182,
        "endChar": 34
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bb2338b_6663d69c",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 184,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T22:27:53Z",
      "side": 1,
      "message": "Can you improve these checks please?  presumably 01_fooooobar_A2 shouldn\u0027t be an ok thing for this to match with.  Or I\u0027m not following what this is for.",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 184,
        "endChar": 64
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bbe136e_e32741b6",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 184,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2021-02-25T21:40:11Z",
      "side": 1,
      "message": "The filesystem pieces of interest look like this (a bus number \"hypen\" the bus address):\n4-0050\n4-0021\netc...\n\nI know your bias against regex for simple pattern matches like this.\nThere will be items like \"i2c-15\", \"subsystem\", \"of_node\".... \nIf such an unexpected subdir name were to exist, it would still have to have a \"hwmon\" entry to be of interest. Even if it does not, the retries expire, and the directory becomes uninteresting.",
      "parentUuid": "2bb2338b_6663d69c",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 184,
        "endChar": 64
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e600cb21_005b23dd",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 184,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-11T15:06:34Z",
      "side": 1,
      "message": "So the line would be\n\nif (directoryName \u003d\u003d busStr + \"-\" + \"addresshex)\n\nThat means we have a direct match, and don\u0027t have any possibility of 4-1050 getting mistaken for the same address of 4-0050.\n\nas written bus 41 would match the same thing as bus 4.\n\nI realize this is a little pedantic, but we keep hitting this exact issue with zero padding, so I\u0027d like to be a little more defensive about it, and avoiding starts_with and ends_with where we can.",
      "parentUuid": "4bbe136e_e32741b6",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 184,
        "endChar": 64
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a780790e_4f2226bb",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T22:27:53Z",
      "side": 1,
      "message": "I\u0027m not quite following why retries are different than the base case here.  Can you elaborate a little?",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 188,
        "endChar": 76
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47a06f19_fc88c93b",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2021-02-25T21:40:11Z",
      "side": 1,
      "message": "Added a comment inline to assist future me.",
      "parentUuid": "a780790e_4f2226bb",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 188,
        "endChar": 76
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "893a81c5_16dc61a0",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T22:27:53Z",
      "side": 1,
      "message": "nit: extra parens.\n\nNon-nit.  Use the error code overload of this.",
      "range": {
        "startLine": 193,
        "startChar": 28,
        "endLine": 193,
        "endChar": 69
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5244021d_2a246e62",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2021-02-25T21:40:11Z",
      "side": 1,
      "message": "I assume the goal is to avoid a throw?",
      "parentUuid": "893a81c5_16dc61a0",
      "range": {
        "startLine": 193,
        "startChar": 28,
        "endLine": 193,
        "endChar": 69
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70809413_f2bf3e3b",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-11T15:06:34Z",
      "side": 1,
      "message": "The goal is to avoid throwing errors you haven\u0027t caught somewhere (ie crashing) when things aren\u0027t exactly how they should be.  It\u0027s also about not mixing exceptions with boolean error return types for a given function.",
      "parentUuid": "5244021d_2a246e62",
      "range": {
        "startLine": 193,
        "startChar": 28,
        "endLine": 193,
        "endChar": 69
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "412cdabf_833766a8",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T22:27:53Z",
      "side": 1,
      "message": "You don\u0027t need an else after a return",
      "range": {
        "startLine": 194,
        "startChar": 0,
        "endLine": 196,
        "endChar": 24
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56324867_62a5cc6b",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2021-02-25T21:40:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "412cdabf_833766a8",
      "range": {
        "startLine": 194,
        "startChar": 0,
        "endLine": 196,
        "endChar": 24
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb658c74_cfc608a3",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T22:27:53Z",
      "side": 1,
      "message": "unless I\u0027m missing something, I don\u0027t see anything taking ownership of these.  I suspect they can just be passed by value?\n\nAlso, as written, both of these would need to be checked for nullptr.",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 212,
        "endChar": 57
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0cb7d47_4c28a8ff",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2021-02-25T21:40:11Z",
      "side": 1,
      "message": "These are checked for null in the deviceIsCreated function.\nI attempted to pass these by value. The code got gnarly quickly.\nLeaving these as unmanaged pointers caused them to go out of scope in the boost::asio::steady_timer code. \nThe initial caller to this function has to initialize things besides i2c devices, which means bus and address may not have a value at all. Rather than choose an arbitrary bus/address number in the event they were not populated, it made more sense to me to leave the pointer \u003d\u003d nullptr.",
      "parentUuid": "bb658c74_cfc608a3",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 212,
        "endChar": 57
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74585479_5e77d7f3",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-11T15:06:34Z",
      "side": 1,
      "message": "\u003e These are checked for null in the deviceIsCreated function.\n\u003e I attempted to pass these by value. The code got gnarly quickly.\n\u003e Leaving these as unmanaged pointers caused them to go out of scope in the boost::asio::steady_timer code. \n\nAHHHHH, that\u0027s where the values are shared.  Ug... That\u0027s a hard one.  Fine as is.\n\n\u003e The initial caller to this function has to initialize things besides i2c devices, which means bus and address may not have a value at all. Rather than choose an arbitrary bus/address number in the event they were not populated, it made more sense to me to leave the pointer \u003d\u003d nullptr.\n\nYeah, this is why I suggested std::optional, but yeah, this is just a hard one.  Its fine as is if you don\u0027t want to mess with it.",
      "parentUuid": "d0cb7d47_4c28a8ff",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 212,
        "endChar": 57
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b85e842_4d4982c9",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T22:27:53Z",
      "side": 1,
      "message": "This is never called with anything but the default.  Please remove the param until it\u0027s needed.",
      "range": {
        "startLine": 215,
        "startChar": 24,
        "endLine": 215,
        "endChar": 69
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81e23b2d_6aba625c",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2021-02-25T21:40:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b85e842_4d4982c9",
      "range": {
        "startLine": 215,
        "startChar": 24,
        "endLine": 215,
        "endChar": 69
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b824a8af_d3a80a9b",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 238,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T22:27:53Z",
      "side": 1,
      "message": "This causes the timer to implicitly own itself.  I suspect you need a higher level class that can own the timer, and own the retry count, so we\u0027re not instantiating a new timer every loop.\n\nWhat do you think?",
      "range": {
        "startLine": 237,
        "startChar": 0,
        "endLine": 238,
        "endChar": 60
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f397a95_e62a9e29",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 238,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2021-02-25T21:40:11Z",
      "side": 1,
      "message": "My opinion.... it follows the paradigm in EntityManager.cpp lines 161, and 222, maybe others. I don\u0027t see how this example behaves differently. Is there some nuance I\u0027m missing?",
      "parentUuid": "b824a8af_d3a80a9b",
      "range": {
        "startLine": 237,
        "startChar": 0,
        "endLine": 238,
        "endChar": 60
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7b3e23c_4dc371b5",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 239,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T22:27:53Z",
      "side": 1,
      "message": "Can you add a comment about how this number was chosen?",
      "range": {
        "startLine": 239,
        "startChar": 61,
        "endLine": 239,
        "endChar": 64
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0e4404d_f32f0bea",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 239,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2021-02-25T21:40:11Z",
      "side": 1,
      "message": "It was a WAG.\nI chose it for being less than 1000mS, and greater than 100mS.",
      "parentUuid": "e7b3e23c_4dc371b5",
      "range": {
        "startLine": 239,
        "startChar": 61,
        "endLine": 239,
        "endChar": 64
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36f9dea3_4e8a00ff",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 242,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T22:27:53Z",
      "side": 1,
      "message": "handle your errors please.  When and if this timer is canceled it will return an error.",
      "range": {
        "startLine": 242,
        "startChar": 48,
        "endLine": 242,
        "endChar": 74
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a811d4fb_991ed781",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 242,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2021-02-25T21:40:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "36f9dea3_4e8a00ff",
      "range": {
        "startLine": 242,
        "startChar": 48,
        "endLine": 242,
        "endChar": 74
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f41e3fc3_2a5c94a0",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T22:27:53Z",
      "side": 1,
      "message": "See above, these aren\u0027t used as anything except by value.  Shared_ptr seems like overkill.\n\nstd::optional\u003cuint64_t\u003e in this scope, then check for existence before you call your new function?",
      "range": {
        "startLine": 261,
        "startChar": 4,
        "endLine": 261,
        "endChar": 19
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31ef05fa_397ff130",
        "filename": "src/Overlay.cpp",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2021-02-25T21:40:11Z",
      "side": 1,
      "message": "This level doesn\u0027t know if these values are to be used or not. As I mentioned above, passing by value caused extensive, and confusing code changes. Leaving these as unmanaged pointers caused them to be out of scope when they needed to be used in the steady_timer. Making them shared guarantees a value survives the steady_timer. Leaving the pointers as nullptr guarantees they are out of range of a uint64_t. I didn\u0027t want to guess what value to give them in the event the JSON file did not provide a value.",
      "parentUuid": "f41e3fc3_2a5c94a0",
      "range": {
        "startLine": 261,
        "startChar": 4,
        "endLine": 261,
        "endChar": 19
      },
      "revId": "ba9331ef4fccc60ce726fdb0cb7a7f185f029398",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}