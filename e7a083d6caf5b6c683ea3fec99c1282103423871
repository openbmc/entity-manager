{
  "comments": [
    {
      "key": {
        "uuid": "f456b41a_145d9b0f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-29T12:49:20Z",
      "side": 1,
      "message": "Regardless of implementation details, I think getting the logic factored out into a self contained thing is a great step forward for testing and maintainence.",
      "revId": "e7a083d6caf5b6c683ea3fec99c1282103423871",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a40e4eb0_5938cc80",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-29T12:49:20Z",
      "side": 1,
      "message": "Glad to see an off the shelf solution being used.  Sort of curious what the storage footprint impact looks like with this tool.",
      "revId": "e7a083d6caf5b6c683ea3fec99c1282103423871",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ec5d843_7212539b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-29T15:08:25Z",
      "side": 1,
      "message": "In my testing, it was about 12k for the full application.  I\u0027m not sure how much of that was spirit versus the parser itself, but it seems reasonable.\n\nIn theory, the compiler can see and optimize the full grammar as if you had hardcoded it by hand, so it should be roughly as complex as we make it.",
      "parentUuid": "a40e4eb0_5938cc80",
      "revId": "e7a083d6caf5b6c683ea3fec99c1282103423871",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0b0a299_f74d860c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-29T15:58:23Z",
      "side": 1,
      "message": "Also, it was 5k before I added the symbols stuff, so it has the potential to swing wildly, but in a pretty reasonable range.",
      "parentUuid": "0ec5d843_7212539b",
      "revId": "e7a083d6caf5b6c683ea3fec99c1282103423871",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "494fe710_0ceafc3e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-29T12:49:20Z",
      "side": 1,
      "message": "This makes sense to me.  IMO implicit behavior such as this...just leads to bugs.",
      "revId": "e7a083d6caf5b6c683ea3fec99c1282103423871",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9b52524_99ad3856",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-29T15:08:25Z",
      "side": 1,
      "message": "In looking at integrating this, this might need to be a follow on goal.  As-is, entity-manager does multiple passes on the data, each time with different keys.  I suspect that can be refactored to do something cleaner, but it\u0027s might be outside the scope of this patch.  But we\u0027ll see as I dig in more.",
      "parentUuid": "494fe710_0ceafc3e",
      "revId": "e7a083d6caf5b6c683ea3fec99c1282103423871",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d410abf_bee47bf8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-29T12:49:20Z",
      "side": 1,
      "message": "The IBM VPD detection daemon publishes bytestrings (dbus type \u0027ay\u0027).  The \u0026/| operators would possibly help when writing probe statements.\n\nAlso - the \"against core principles\" statement left me confused - I\u0027m curious what use case of these operators would violate EM\u0027s core principles and which ones wouldn\u0027t?",
      "revId": "e7a083d6caf5b6c683ea3fec99c1282103423871",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72e00592_958a3697",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-29T15:08:25Z",
      "side": 1,
      "message": "The biggest thing is that Entity manager configs are supposed to be user-facing, and not contain implementation details.  Needing to do bitwise operators in a probe statement would generally be used for isolating fields in a binary blob, and somewhat speaks to the fact that those parameters should probably be broken out into full properties by the detecting daemon, rather than having EM operate on the binary data itself.\n\nWith that said, happy to discuss it.",
      "parentUuid": "9d410abf_bee47bf8",
      "revId": "e7a083d6caf5b6c683ea3fec99c1282103423871",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "833d0e96_474671d4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-29T18:16:47Z",
      "side": 1,
      "message": "\u003e Entity manager configs are supposed to be user-facing, and not contain implementation details. \n\nI\u0027m having trouble parsing what this means exactly.  Who is the user?  The system operator?  What would an example of something in an EM config that is an implementation detail be?\n\n\u003e  should probably be broken out into full properties by the detecting daemon\n\nThey are already broken out.  An illustrative example - we have a 4 byte property called CCIN or \"customer card identification number\".  This is roughly a part number (although we have those too - IBM hw will have 1-N part numbers for a given CCIN).  Given two hypothetical FRUs with CCINs 0xaaaaaabb and 0xaaaaaacc it would be nice to be able to probe match both (0xaaaaaa) without having to list each one.  It is the same thing as a wildcard match on a part number string.",
      "parentUuid": "72e00592_958a3697",
      "revId": "e7a083d6caf5b6c683ea3fec99c1282103423871",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e733c053_887826b3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-29T22:37:10Z",
      "side": 1,
      "message": "\u003e \u003e Entity manager configs are supposed to be user-facing, and not contain implementation details. \n\u003e \n\u003e I\u0027m having trouble parsing what this means exactly.  Who is the user?  The system operator?  What would an example of something in an EM config that is an implementation detail be?\n\nSomething like this, where we\u0027re hardcoding a specific dbus interface into a config file, and forwarding along specific property names through EM.  Ideally I\u0027d like to see that whole section go away in all the config files, and the user would have some way to say \"this is a power supply\", maybe based on folder structure?  At the time we wrote this, perfect was the enemy of good, so here we are.\n\nhttps://github.com/openbmc/entity-manager/blob/d7b6659944c3527622d454526509a0a8697ada0f/configurations/ASPOWER_U1A-D11200_PSU.json#L146\n\n\nOther examples of implementation details:  Take a look at the probe entry a couple lines up.  Knowing which entity/interface to match against would require a lot of documentation for a user, and something people are already struggling with.  This is an area that\u0027s ripe for simplification.\n\n\u003e \n\u003e \u003e  should probably be broken out into full properties by the detecting daemon\n\u003e \n\u003e They are already broken out.  An illustrative example - we have a 4 byte property called CCIN or \"customer card identification number\".  This is roughly a part number (although we have those too - IBM hw will have 1-N part numbers for a given CCIN).  Given two hypothetical FRUs with CCINs 0xaaaaaabb and 0xaaaaaacc it would be nice to be able to probe match both (0xaaaaaa) without having to list each one.  It is the same thing as a wildcard match on a part number string.\n\nIn that case, today you would just do an OR match between the two cards.  Similar to this:\nhttps://github.com/openbmc/entity-manager/blob/d7b6659944c3527622d454526509a0a8697ada0f/configurations/Intel%20Front%20Panel.json#L43\n\nI tend to prefer that, as it\u0027s a lot more obvious how many, and what cards this file supports than if you did it with a single match.  Also, when that one card needs its own config file because X manufacturer did Y thing wrong, it\u0027s much easier to extract.\n\nIt should be noted, the above is moot in the context of this patch, as the variable replacement parser doesn\u0027t work on Probe statements at all, given that you would have to know about the match to make the match, you get a chicken and egg problem.",
      "parentUuid": "833d0e96_474671d4",
      "revId": "e7a083d6caf5b6c683ea3fec99c1282103423871",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3dff51ed_705eeddc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-30T11:22:07Z",
      "side": 1,
      "message": "\u003e In that case, today you would just do an OR match between the two cards.\n\nRight, this was my plan.  There are wildcard matches already though are there not?  Are those broken and need to be fixed?\n\n \"Probe\": \"xyz.openbmc_project.FruDevice({\u0027PRODUCT_PRODUCT_NAME\u0027: \u0027.*WFT\u0027})\"\n\nHow is this different?\n\n\u003e  as the variable replacement parser doesn\u0027t work on Probe statements at all,\n\nI wondered about this.  It seems we have 3 contexts for replacing tokens in EM?\n\n1 - probe statments\n2 - $address, $bus, $index\n3 - the ones this parser targets?\n\nIs there a difference between 2 and 3?  Why do I find $address in some contexts but $ADDRESS in others?",
      "parentUuid": "e733c053_887826b3",
      "revId": "e7a083d6caf5b6c683ea3fec99c1282103423871",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deae1abe_dc881c4f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-29T12:49:20Z",
      "side": 1,
      "message": "Is it worth mentioning unit tests here?",
      "revId": "e7a083d6caf5b6c683ea3fec99c1282103423871",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e63db33_fada4143",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-29T15:08:25Z",
      "side": 1,
      "message": "Yup.  I guess I just assumed we\u0027d run the existing unit tests for the parser, possibly adding some new cases for oddities in the grammar (things like spaces in math expressions).\n\nI\u0027ve added a message about running the unit tests.",
      "parentUuid": "deae1abe_dc881c4f",
      "revId": "e7a083d6caf5b6c683ea3fec99c1282103423871",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98bd855d_7439beca",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-09-29T12:49:20Z",
      "side": 1,
      "message": "Would be cool if this could happen automatically as a part of CI.  You could even do this before making any changes to easily validate that the new parser didn\u0027t regress anything.",
      "revId": "e7a083d6caf5b6c683ea3fec99c1282103423871",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ccacbe00_ba4b127f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-29T15:08:25Z",
      "side": 1,
      "message": "Agreed.  That would help a lot.  I\u0027ll add it to the (never-ending) list.",
      "parentUuid": "98bd855d_7439beca",
      "revId": "e7a083d6caf5b6c683ea3fec99c1282103423871",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}