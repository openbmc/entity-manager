{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "dc2541fb_a50c5c4a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-10-16T11:10:16Z",
      "side": 1,
      "message": "IMO it\u0027s a good direction but we could do some tweaks to avoid the raw pointers",
      "revId": "e2c3a219c428be4a3a8a128a03c2040bf8957d41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ddbb468_b65b2b5e",
        "filename": "src/entity_manager/dbus_interface.cpp",
        "patchSetId": 1
      },
      "lineNbr": 281,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-10-16T11:10:16Z",
      "side": 1,
      "message": "```suggestion\n            const auto [name, foundName] \u003d getStringFromObject(newData, \"Name\");\n            const auto [type, foundType] \u003d getStringFromObject(newData, \"Type\");\n\n            if (!foundName || !foundType)\n            {\n                throw std::invalid_argument(\"Type and Name must be a string.\");\n            }\n```",
      "range": {
        "startLine": 276,
        "startChar": 12,
        "endLine": 281,
        "endChar": 13
      },
      "revId": "e2c3a219c428be4a3a8a128a03c2040bf8957d41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e59e3898_c0b1b71a",
        "filename": "src/json_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-10-16T11:10:16Z",
      "side": 1,
      "message": "Do we put the SPDX-License-Identifier here?",
      "revId": "e2c3a219c428be4a3a8a128a03c2040bf8957d41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc8f0ca4_5b6b9988",
        "filename": "src/json_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-10-16T17:01:56Z",
      "side": 1,
      "message": "ACK",
      "parentUuid": "e59e3898_c0b1b71a",
      "revId": "e2c3a219c428be4a3a8a128a03c2040bf8957d41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02fa46ac_55d1f8aa",
        "filename": "src/json_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-10-16T11:10:16Z",
      "side": 1,
      "message": "nit: what about `getStringFromObj`  which is a bit shorter.",
      "range": {
        "startLine": 9,
        "startChar": 19,
        "endLine": 9,
        "endChar": 38
      },
      "revId": "e2c3a219c428be4a3a8a128a03c2040bf8957d41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b2fbf24_aa614dd7",
        "filename": "src/json_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-10-16T17:01:56Z",
      "side": 1,
      "message": "Is saving 3 characters really important?  If i wanted to save characters, i\u0027d do something like:\n\nstrFromObject(...)",
      "parentUuid": "02fa46ac_55d1f8aa",
      "range": {
        "startLine": 9,
        "startChar": 19,
        "endLine": 9,
        "endChar": 38
      },
      "revId": "e2c3a219c428be4a3a8a128a03c2040bf8957d41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c21497c_f1db85c2",
        "filename": "src/json_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-10-20T13:21:45Z",
      "side": 1,
      "message": "it\u0027s not important to me, we can close this comment.",
      "parentUuid": "2b2fbf24_aa614dd7",
      "range": {
        "startLine": 9,
        "startChar": 19,
        "endLine": 9,
        "endChar": 38
      },
      "revId": "e2c3a219c428be4a3a8a128a03c2040bf8957d41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d2ff438_0fafe57e",
        "filename": "src/json_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-10-16T11:10:16Z",
      "side": 1,
      "message": "Did you consider to use a structured binding declaration, to return a tuple here and then use it like this later:\n\n```\nauto [name, foundName] \u003d getStringFromObject(obj, \"Name\");\nif (!foundName){\n    return;\n}\n\n// do any mutation on the `name` variable here in case of escaping for DBus, template var replacement or whatever\n```\n\nIn that case we avoid having to copy it to an `std::string` later if we need to pass a `std::string\u0026` to another function.\n\nWe also avoid dealing with raw pointers. I would like to avoid raw pointers if possible since they could spread throughout the codebase and then we would have to do `nullptr` checks.",
      "revId": "e2c3a219c428be4a3a8a128a03c2040bf8957d41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d988472_aa226a2b",
        "filename": "src/json_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-10-16T17:01:56Z",
      "side": 1,
      "message": "foundName would be a bool?  If I were to follow that pattern, I\u0027d do std::expected\u003cstd::string, bool\u003e but returning nullptr on not found seems pretty standard.\n\nKeep in mind, your example doesn\u0027t work for the non-const cast because you put auto instead of auto\u0026.",
      "parentUuid": "4d2ff438_0fafe57e",
      "revId": "e2c3a219c428be4a3a8a128a03c2040bf8957d41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25a5fb6a_0607325c",
        "filename": "src/json_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-10-20T13:21:45Z",
      "side": 1,
      "message": "\u003e If I were to follow that pattern, I\u0027d do std::expected\u003cstd::string, bool\u003e \n\nsounds good too. There are various solutions without using raw pointer.\n\n\u003e Keep in mind, your example doesn\u0027t work for the non-const cast because you put auto instead of auto\u0026.\n\nI don\u0027t intend to propose a complete solution here, you could probably come up with something better / specialize.\n\nMy main point is that we avoid introducing raw pointers if we can avoid it.\n\nBy using the raw pointer we are coupling the valid scope of that pointer to the lifetime of the lohmann json object.\n\nI would prefer if we just copied out the string which we need and avoid those troubles.\n\nIf it\u0027s somehow relevant for performance (in a measurable way) and done in code that has decent test coverage, i would be in favor of such optimizations.\n\nSince this is a utility function which can be called anywhere i doubt we can meaningfully cover all the call sites.\n\nCopying out the string seems like a safer alternative to me.",
      "parentUuid": "0d988472_aa226a2b",
      "revId": "e2c3a219c428be4a3a8a128a03c2040bf8957d41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "180e7d32_5b29f7d0",
        "filename": "src/json_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-10-20T17:19:48Z",
      "side": 1,
      "message": "I\u0027d prefer we avoid the copy because this is a generic routine, and copies are known to be \"expensive\".  Also keep in mind that there\u0027s non const use cases that need to pull the string out, then modify it, so we can\u0027t have an \"always safe\" version of this.  I think it makes the most sense to just return a pointer/reference.",
      "parentUuid": "25a5fb6a_0607325c",
      "revId": "e2c3a219c428be4a3a8a128a03c2040bf8957d41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c218c23d_97603f1c",
        "filename": "src/json_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-10-20T17:31:56Z",
      "side": 1,
      "message": "\u003e I\u0027d prefer we avoid the copy because this is a generic routine, and copies are known to be \"expensive\". \n\nYeah but that\u0027s an optimization concern. Optimization concerns apply to code which has a good test coverage. (IMO)\n\n\u003e Also keep in mind that there\u0027s non const use cases that need to pull the string out, then modify it\n\nYeah i don\u0027t think EM should do this. If it does that now, better to refactor that.\n\njson just happens to be our config format, it should be in the config parsing and persistence layer and not all over EM internals (IMO).\n\n\u003e I think it makes the most sense to just return a pointer/reference.\n\nIf it\u0027s at all possible, let\u0027s go with the reference then to avoid putting nullptr checks everywhere.",
      "parentUuid": "180e7d32_5b29f7d0",
      "revId": "e2c3a219c428be4a3a8a128a03c2040bf8957d41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1d4eb4d_aefb8d58",
        "filename": "src/json_utils.hpp",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-10-16T11:10:16Z",
      "side": 1,
      "message": "Do we put the SPDX-License-Identifier here?",
      "revId": "e2c3a219c428be4a3a8a128a03c2040bf8957d41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c59b5383_5fb86310",
        "filename": "src/json_utils.hpp",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-10-16T17:01:56Z",
      "side": 1,
      "message": "ACK",
      "parentUuid": "d1d4eb4d_aefb8d58",
      "revId": "e2c3a219c428be4a3a8a128a03c2040bf8957d41",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}