{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "202f19e5_91a11e81",
        "filename": "scripts/filter_configs.py",
        "patchSetId": 35
      },
      "lineNbr": 7,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-06-11T11:26:12Z",
      "side": 1,
      "message": "nit: Can you add typing information?",
      "revId": "92ce8a0ca377a60d9831d386c93b14864884b2a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4591810f_b0ed56ba",
        "filename": "scripts/filter_configs.py",
        "patchSetId": 35
      },
      "lineNbr": 7,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-06-11T15:59:22Z",
      "side": 1,
      "message": "What\u0027s next, make it go fast? \n\nMight as well re-write the thing in C++ ðŸ˜„\n\nLet me know if you want it in C++.\n\nThere was a discussion on discord about meson supporting native C++ tools\nbut i am not too keen on investing so much time into this patch since the\nconceptual \"should we support this feature\" has not been cleared yet.\n\nkeeping this comment open for now.",
      "parentUuid": "202f19e5_91a11e81",
      "revId": "92ce8a0ca377a60d9831d386c93b14864884b2a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd29742a_4ec7905d",
        "filename": "scripts/filter_configs.py",
        "patchSetId": 35
      },
      "lineNbr": 7,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-06-11T16:20:56Z",
      "side": 1,
      "message": "I don\u0027t want it in C++.  I don\u0027t think adding things like `regexes: List[str]` is a big lift.",
      "parentUuid": "4591810f_b0ed56ba",
      "revId": "92ce8a0ca377a60d9831d386c93b14864884b2a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a907f9fa_6041e3a1",
        "filename": "scripts/filter_configs.py",
        "patchSetId": 35
      },
      "lineNbr": 23,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-06-11T11:26:12Z",
      "side": 1,
      "message": "`loads` please",
      "range": {
        "startLine": 23,
        "startChar": 21,
        "endLine": 23,
        "endChar": 25
      },
      "revId": "92ce8a0ca377a60d9831d386c93b14864884b2a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef07f8f4_2112b3ac",
        "filename": "scripts/filter_configs.py",
        "patchSetId": 35
      },
      "lineNbr": 23,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-06-11T15:59:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a907f9fa_6041e3a1",
      "range": {
        "startLine": 23,
        "startChar": 21,
        "endLine": 23,
        "endChar": 25
      },
      "revId": "92ce8a0ca377a60d9831d386c93b14864884b2a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "285ae277_6df973f6",
        "filename": "scripts/filter_configs.py",
        "patchSetId": 35
      },
      "lineNbr": 31,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-06-11T11:26:12Z",
      "side": 1,
      "message": "Why is an empty string considered a match?",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 27
      },
      "revId": "92ce8a0ca377a60d9831d386c93b14864884b2a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee7fb90a_b1c4f950",
        "filename": "scripts/filter_configs.py",
        "patchSetId": 35
      },
      "lineNbr": 31,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-06-11T15:59:22Z",
      "side": 1,
      "message": "We need some way to get a config into all images. In case there is no way to determine if the system will need to support that component or not.\n\nIn that case it can have empty \"CompatibleHardware\".\n\nWhich is the same as not having the property at all, but more explicit.",
      "parentUuid": "285ae277_6df973f6",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 27
      },
      "revId": "92ce8a0ca377a60d9831d386c93b14864884b2a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab4291f6_4ccd3a7c",
        "filename": "scripts/filter_configs.py",
        "patchSetId": 35
      },
      "lineNbr": 31,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-06-11T16:22:45Z",
      "side": 1,
      "message": "How do we document that?  It\u0027s not clear to me from reading the code here.  I don\u0027t want this nugget of information lost.",
      "parentUuid": "ee7fb90a_b1c4f950",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 27
      },
      "revId": "92ce8a0ca377a60d9831d386c93b14864884b2a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05cd7195_b6dcf9dd",
        "filename": "scripts/filter_configs.py",
        "patchSetId": 35
      },
      "lineNbr": 53,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-06-11T11:26:12Z",
      "side": 1,
      "message": "Can you simplify this to use list comprehension?  It looks like a one-liner to me:\n\n```\nreturn [x if filter_config(compatible_hw, x) for x in configs]\n```",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 53,
        "endChar": 27
      },
      "revId": "92ce8a0ca377a60d9831d386c93b14864884b2a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8fc4a4f5_ac786be6",
        "filename": "scripts/filter_configs.py",
        "patchSetId": 35
      },
      "lineNbr": 53,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-06-11T15:59:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05cd7195_b6dcf9dd",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 53,
        "endChar": 27
      },
      "revId": "92ce8a0ca377a60d9831d386c93b14864884b2a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdfedba5_cea408c1",
        "filename": "scripts/filter_configs.py",
        "patchSetId": 35
      },
      "lineNbr": 55,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-06-11T11:26:12Z",
      "side": 1,
      "message": "nit: Python tends to use the `if __name__ \u003d\u003d \"__main__\": main()` pattern to avoid polluting the global environment.",
      "revId": "92ce8a0ca377a60d9831d386c93b14864884b2a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c616edb_203eaddc",
        "filename": "scripts/filter_configs.py",
        "patchSetId": 35
      },
      "lineNbr": 55,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-06-11T15:59:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cdfedba5_cea408c1",
      "revId": "92ce8a0ca377a60d9831d386c93b14864884b2a3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}