{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "afdd28fb_da564ac7",
        "filename": "schemas/firmware.json",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-12T19:39:35Z",
      "side": 1,
      "message": "Since you have defined MuxGPIOs as an array of nested object, i suppose this will show on DBus as indexed interfaces, for example,\n\nxyz.openbmc_project.Configuration.EEPROMDeviceFirmware.MuxGPIOs0\nxyz.openbmc_project.Configuration.EEPROMDeviceFirmware.MuxGPIOs1\n...\nxyz.openbmc_project.Configuration.EEPROMDeviceFirmware.MuxGPIOsX\n\nHave you verified this by providing a test configuration? This will make the reactor side handling more involved and we won\u0027t be able to use the phosphor-dbus-interfaces generated bindings.",
      "revId": "2330beec2e347a6d9b4784b6ffde2659f14d10b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15078cbb_4a153a7b",
        "filename": "schemas/firmware.json",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1002253
      },
      "writtenOn": "2025-02-13T01:06:11Z",
      "side": 1,
      "message": "Yes, it will show on DBus as indexed xyz.openbmc_project.Configuration.EEPROMDeviceFirmware.MuxGPIOsX. Since there are cases where multiple GPIOs need to be set up to mux the EEPROM device to the BMC, this approach ensures flexibility in handling different hardware configurations.\n\nI understand that this makes the reactor-side handling more involved and prevents the use of phosphor-dbus-interfaces generated bindings. Do you have any suggestions or alternative ways to structure this on DBus while still supporting multiple GPIOs for muxing?",
      "parentUuid": "afdd28fb_da564ac7",
      "revId": "2330beec2e347a6d9b4784b6ffde2659f14d10b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6062b7e2_bd8b122a",
        "filename": "schemas/firmware.json",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-13T08:13:09Z",
      "side": 1,
      "message": "\u003e Yes, it will show on DBus as indexed xyz.openbmc_project.Configuration.EEPROMDeviceFirmware.MuxGPIOsX. Since there are cases where multiple GPIOs need to be set up to mux the EEPROM device to the BMC, this approach ensures flexibility in handling different hardware configurations.\n\u003e \n\u003e I understand that this makes the reactor-side handling more involved and prevents the use of phosphor-dbus-interfaces generated bindings. Do you have any suggestions or alternative ways to structure this on DBus while still supporting multiple GPIOs for muxing?\n\n\nOne way you can handle this is to specify array of individual properties rather than array of nested objects. You can refer to BIOS schema here https://gerrit.openbmc.org/c/openbmc/entity-manager/+/75948/25/schemas/firmware.json.",
      "parentUuid": "15078cbb_4a153a7b",
      "revId": "2330beec2e347a6d9b4784b6ffde2659f14d10b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e6b8c2b_c5619b41",
        "filename": "schemas/firmware.json",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1002253
      },
      "writtenOn": "2025-02-14T08:31:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6062b7e2_bd8b122a",
      "revId": "2330beec2e347a6d9b4784b6ffde2659f14d10b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e5a70d9_d1e9d758",
        "filename": "schemas/firmware.json",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-13T09:10:56Z",
      "side": 1,
      "message": "I don\u0027t see PinName or LineName in the list.\n\nAlso do you need ChipName when you add the LineName?",
      "revId": "2330beec2e347a6d9b4784b6ffde2659f14d10b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21b326b8_7a933f0e",
        "filename": "schemas/firmware.json",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 1002253
      },
      "writtenOn": "2025-02-13T09:29:05Z",
      "side": 1,
      "message": "Referring to https://gerrit.openbmc.org/c/openbmc/entity-manager/+/75948/25/schemas/firmware.json, I am planning to use MuxGPIOs as the LineName and MuxGPIOValues as the Polarity. ChipName is not needed.",
      "parentUuid": "3e5a70d9_d1e9d758",
      "revId": "2330beec2e347a6d9b4784b6ffde2659f14d10b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b72c49bd_b681e92e",
        "filename": "schemas/firmware.json",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-13T09:31:22Z",
      "side": 1,
      "message": "I would suggest to use polarity if that makes better sense rather than using the gpiovalue as polarity is more industry standard term.",
      "parentUuid": "21b326b8_7a933f0e",
      "revId": "2330beec2e347a6d9b4784b6ffde2659f14d10b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8564e008_97121711",
        "filename": "schemas/firmware.json",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 1002253
      },
      "writtenOn": "2025-02-14T08:31:18Z",
      "side": 1,
      "message": "OK, used polarity.",
      "parentUuid": "b72c49bd_b681e92e",
      "revId": "2330beec2e347a6d9b4784b6ffde2659f14d10b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}