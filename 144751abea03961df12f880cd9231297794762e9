{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5506b0ee_67d6e63b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1001303
      },
      "writtenOn": "2024-05-13T19:20:54Z",
      "side": 1,
      "message": "That EEPROM isn\u0027t already defined in your device tree is it?\n\nWith your change you should read different bytes on an 8-bit EEPROM and thus `isDevice16Bit()` would return true instead of false.\n\nDid you do an I2C trace to see what was being read?  You can do something like this to see what\u0027s being read https://linuxtv.org/wiki/index.php/Bus_snooping/sniffing#i2c",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 39
      },
      "revId": "144751abea03961df12f880cd9231297794762e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83fdea4c_06a768a3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1001717
      },
      "writtenOn": "2024-06-26T13:07:48Z",
      "side": 1,
      "message": "The EEPROM wasn\u0027t defined in the device tree. Your explanation matches with what is in the i2c trace. Thanks!",
      "parentUuid": "5506b0ee_67d6e63b",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 39
      },
      "revId": "144751abea03961df12f880cd9231297794762e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db457ec0_dedb901d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-13T17:58:48Z",
      "side": 1,
      "message": "I think we\u0027re at the point here where we need to make this an option flag in FruDevice for \"EEPROM detection POLICY\" or something of that sort.  As a starting point, lets make it something like\n\n{\n   8bitOnly\n   16BitOnly\n   DetectVia8ByteTransfer\n   DetectVia1ByteTransfer\n   Others?\n}",
      "revId": "144751abea03961df12f880cd9231297794762e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b112d858_bbffc56e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-13T18:03:36Z",
      "side": 1,
      "message": "This code keeps getting changed, and keeps breaking devices that were previously working, which is understandable, because it\u0027s hard to get all the possible hardware types in one system, we need to start putting these behind policy flags that we can set on a per image basis.  While I\u0027d really like to thing we can come up with something that handles all cases of 8 bit hardware, 16 bit hardware, 8 bit emulated, 16 bit emulated eepoms, that doesn\u0027t seem realistic right now.",
      "parentUuid": "db457ec0_dedb901d",
      "revId": "144751abea03961df12f880cd9231297794762e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41457fb9_09988124",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001717
      },
      "writtenOn": "2024-06-26T13:07:48Z",
      "side": 1,
      "message": "Apparently the old code works. @Carson gave a detailed explanation of the internal mechanics, why it works for most EEPROMs and doesn\u0027t for a few and it matches with the activities seen in the i2c trace.",
      "parentUuid": "b112d858_bbffc56e",
      "revId": "144751abea03961df12f880cd9231297794762e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ],
  "submitRequirementResults": []
}