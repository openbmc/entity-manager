{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "96b615d8_475755e8",
        "filename": "include/EntityManager.hpp",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-12T02:10:10Z",
      "side": 1,
      "message": "This seems like one step too far.  Inventing a using definition that\u0027s longer than the original name, and obfuscates it.  Same thing with DBusInterfaceName, and DBusPath.  DBusPath is especially confusing, because sdbusplus already has a dbus path type, which isn\u0027t std::string, so IMO lets avoid the confusion and keep these down to one level of indirection.\n\nThe rest seems fine though.  FWIW I just finished getting the bmcweb versions of these in order, and I landed on vector\u003cpair\u003cstr, str\u003e\u003e being a better fit in these cases.  Not sure if this is the same or not",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 37
      },
      "revId": "0d5935a38568c948de1f43debeaff7b363e6f9bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d24755b4_95873fed",
        "filename": "include/EntityManager.hpp",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-04-12T04:37:22Z",
      "side": 1,
      "message": "\u003e This seems like one step too far.  Inventing a using definition that\u0027s longer than the original name\n\nThe purpose wasn\u0027t to end up with something with less characters, rather it was to have something more descriptive. A bunch of maps keyed by a string made it harder to keep track of what the keys _meant_.\n\nThis made it easier for me but if you\u0027re set on it then I\u0027ll discard the std::string aliases.\n\n\u003e The rest seems fine though.  FWIW I just finished getting the bmcweb versions of these in order, and I landed on vector\u003cpair\u003cstr, str\u003e\u003e being a better fit in these cases.\n\nOkay, however I\u0027d like to keep any changes to the data structures separate, this was just a patch to make what\u0027s already here easier to think about.",
      "parentUuid": "96b615d8_475755e8",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 37
      },
      "revId": "0d5935a38568c948de1f43debeaff7b363e6f9bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe837a66_64dc7729",
        "filename": "include/EntityManager.hpp",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-04-12T06:21:29Z",
      "side": 1,
      "message": "I\u0027ve dropped the string aliases.",
      "parentUuid": "d24755b4_95873fed",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 37
      },
      "revId": "0d5935a38568c948de1f43debeaff7b363e6f9bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55b2e9a5_44245d21",
        "filename": "include/EntityManager.hpp",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-12T15:03:38Z",
      "side": 1,
      "message": "\u003e This made it easier for me but if you\u0027re set on it then I\u0027ll discard the std::string aliases.\n\nI\u0027m not super set on it, just something that I\u0027ve observed in the past, especially with DBusPath type definitions, and people getting confused that DBusPath !\u003d sdbusplus::message::object_path.",
      "parentUuid": "fe837a66_64dc7729",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 37
      },
      "revId": "0d5935a38568c948de1f43debeaff7b363e6f9bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f40cb6a_6e45c987",
        "filename": "include/EntityManager.hpp",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-04-12T23:44:46Z",
      "side": 1,
      "message": "Ack.\n\nI had another thought on what might be contributing to issues here:\n\nDBus concepts, especially interfaces, are well-defined in the sense that a given interface definition has a closed set of properties (and their types). In a frictionless vacuum, an interface would map to a specific struct with appropriate members. Again in the frictionless vacuum, the results from the mapper could be represented by a variant of all the possible interface structs. However we\u0027re not in the frictionless vacuum and that approach feels impractical, instead we\u0027re collapsing the (open) set of all possible interfaces into a type - a map - and thus we\u0027re forced to divorce the name of the interface from the interface itself (the set of properties and their values). And from there we get the weird \"interface name\" vs \"interface\" distinction that I\u0027m addressing here, and a host of other issues.",
      "parentUuid": "55b2e9a5_44245d21",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 37
      },
      "revId": "0d5935a38568c948de1f43debeaff7b363e6f9bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69a72b45_d2a87ce4",
        "filename": "include/EntityManager.hpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000500
      },
      "writtenOn": "2022-04-12T02:57:16Z",
      "side": 1,
      "message": "I tried to wrap my head around the various types and their friends and it turns out some are from `org.freedesktop.DBus.Properties` and some are from `xyz.openbmc_project.ObjectMapper`:\n\n```\nDBus type     EntityManager  bmcweb                       DBus method\na{sa{sas}}    DBusSubtree    MapperGetAncestorsResponse   (1)\n   a{sas}     DBusObject     MapperGetObject              (2)\n      \n     {sv}     DBusInterface  DBusPropertiesMap            (3)\n```\n\n(1) GetAncestors or GetSubTree\n(2) GetObject, or sub-results of GetAncesotrs \u0026 GetSubTree\n(3) Properties.GetAll\n\nIt seems bmcweb binds std::vector to a dictionary type (and some other code I saw also does this), I looked it up again and it seems they really are associative arrays.",
      "range": {
        "startLine": 38,
        "startChar": 68,
        "endLine": 38,
        "endChar": 69
      },
      "revId": "0d5935a38568c948de1f43debeaff7b363e6f9bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3dc9356e_14574380",
        "filename": "src/PerformScan.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-04-12T02:16:07Z",
      "side": 1,
      "message": "Is this something that should be converted to DBusInterface?  (Not really sure of the context here so it may not make sense, I\u0027m just sort of pattern-matching types.)",
      "revId": "0d5935a38568c948de1f43debeaff7b363e6f9bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9632420e_aa914389",
        "filename": "src/PerformScan.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-04-12T04:37:22Z",
      "side": 1,
      "message": "I may have converted it in a later patch.",
      "parentUuid": "3dc9356e_14574380",
      "revId": "0d5935a38568c948de1f43debeaff7b363e6f9bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0844aa4f_e50d2f08",
        "filename": "src/PerformScan.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-04-12T06:21:29Z",
      "side": 1,
      "message": "I\u0027ve squashed the other patches into this one.",
      "parentUuid": "9632420e_aa914389",
      "revId": "0d5935a38568c948de1f43debeaff7b363e6f9bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17bfa17e_27bdbe77",
        "filename": "src/PerformScan.cpp",
        "patchSetId": 1
      },
      "lineNbr": 213,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-04-12T02:16:07Z",
      "side": 1,
      "message": "Given the call site I\u0027m guessing this one probably should be DBusInterface though?",
      "revId": "0d5935a38568c948de1f43debeaff7b363e6f9bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7663b4a0_1a786e46",
        "filename": "src/PerformScan.cpp",
        "patchSetId": 1
      },
      "lineNbr": 213,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-04-12T02:20:42Z",
      "side": 1,
      "message": "Oh, except I see now both this and the one above are taken care of in https://gerrit.openbmc-project.xyz/c/openbmc/entity-manager/+/52819 -- any particular reason not to fold those into this same patch?",
      "parentUuid": "17bfa17e_27bdbe77",
      "revId": "0d5935a38568c948de1f43debeaff7b363e6f9bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7bda905_8251820f",
        "filename": "src/PerformScan.cpp",
        "patchSetId": 1
      },
      "lineNbr": 213,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-04-12T04:37:22Z",
      "side": 1,
      "message": "I can squash them all down, just thought it might be easier to review if I broke them up a bit.",
      "parentUuid": "7663b4a0_1a786e46",
      "revId": "0d5935a38568c948de1f43debeaff7b363e6f9bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6dd0e5e1_702d530c",
        "filename": "src/PerformScan.cpp",
        "patchSetId": 1
      },
      "lineNbr": 213,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-04-12T06:21:29Z",
      "side": 1,
      "message": "I\u0027ve squashed the other patches into this one.",
      "parentUuid": "d7bda905_8251820f",
      "revId": "0d5935a38568c948de1f43debeaff7b363e6f9bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ad807ff_ecf88c7b",
        "filename": "src/PerformScan.cpp",
        "patchSetId": 1
      },
      "lineNbr": 379,
      "author": {
        "id": 1000500
      },
      "writtenOn": "2022-04-12T02:57:16Z",
      "side": 1,
      "message": "I guess this is a `DBusObject`?",
      "range": {
        "startLine": 379,
        "startChar": 16,
        "endLine": 379,
        "endChar": 40
      },
      "revId": "0d5935a38568c948de1f43debeaff7b363e6f9bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41bdc132_8c0051c0",
        "filename": "src/PerformScan.cpp",
        "patchSetId": 1
      },
      "lineNbr": 379,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-04-12T04:37:22Z",
      "side": 1,
      "message": "Right. I was on the fence about changing it, what do you think? The code might be easier to follow if we change it.",
      "parentUuid": "6ad807ff_ecf88c7b",
      "range": {
        "startLine": 379,
        "startChar": 16,
        "endLine": 379,
        "endChar": 40
      },
      "revId": "0d5935a38568c948de1f43debeaff7b363e6f9bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}